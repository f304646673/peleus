// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/plugins/mysql_visitor/interface/mysql_visitor_service.proto

#ifndef PROTOBUF_INCLUDED_src_2fplugins_2fmysql_5fvisitor_2finterface_2fmysql_5fvisitor_5fservice_2eproto
#define PROTOBUF_INCLUDED_src_2fplugins_2fmysql_5fvisitor_2finterface_2fmysql_5fvisitor_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fplugins_2fmysql_5fvisitor_2finterface_2fmysql_5fvisitor_5fservice_2eproto 

namespace protobuf_src_2fplugins_2fmysql_5fvisitor_2finterface_2fmysql_5fvisitor_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_src_2fplugins_2fmysql_5fvisitor_2finterface_2fmysql_5fvisitor_5fservice_2eproto
namespace peleus {
namespace plugins {
class MysqlVisitorRow;
class MysqlVisitorRowDefaultTypeInternal;
extern MysqlVisitorRowDefaultTypeInternal _MysqlVisitorRow_default_instance_;
class MysqlVisitorServiceRequest;
class MysqlVisitorServiceRequestDefaultTypeInternal;
extern MysqlVisitorServiceRequestDefaultTypeInternal _MysqlVisitorServiceRequest_default_instance_;
class MysqlVisitorServiceResponse;
class MysqlVisitorServiceResponseDefaultTypeInternal;
extern MysqlVisitorServiceResponseDefaultTypeInternal _MysqlVisitorServiceResponse_default_instance_;
}  // namespace plugins
}  // namespace peleus
namespace google {
namespace protobuf {
template<> ::peleus::plugins::MysqlVisitorRow* Arena::CreateMaybeMessage<::peleus::plugins::MysqlVisitorRow>(Arena*);
template<> ::peleus::plugins::MysqlVisitorServiceRequest* Arena::CreateMaybeMessage<::peleus::plugins::MysqlVisitorServiceRequest>(Arena*);
template<> ::peleus::plugins::MysqlVisitorServiceResponse* Arena::CreateMaybeMessage<::peleus::plugins::MysqlVisitorServiceResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace peleus {
namespace plugins {

// ===================================================================

class MysqlVisitorServiceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.plugins.MysqlVisitorServiceRequest) */ {
 public:
  MysqlVisitorServiceRequest();
  virtual ~MysqlVisitorServiceRequest();

  MysqlVisitorServiceRequest(const MysqlVisitorServiceRequest& from);

  inline MysqlVisitorServiceRequest& operator=(const MysqlVisitorServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlVisitorServiceRequest(MysqlVisitorServiceRequest&& from) noexcept
    : MysqlVisitorServiceRequest() {
    *this = ::std::move(from);
  }

  inline MysqlVisitorServiceRequest& operator=(MysqlVisitorServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlVisitorServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlVisitorServiceRequest* internal_default_instance() {
    return reinterpret_cast<const MysqlVisitorServiceRequest*>(
               &_MysqlVisitorServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MysqlVisitorServiceRequest* other);
  friend void swap(MysqlVisitorServiceRequest& a, MysqlVisitorServiceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlVisitorServiceRequest* New() const final {
    return CreateMaybeMessage<MysqlVisitorServiceRequest>(NULL);
  }

  MysqlVisitorServiceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlVisitorServiceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlVisitorServiceRequest& from);
  void MergeFrom(const MysqlVisitorServiceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlVisitorServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string conn_name = 1;
  bool has_conn_name() const;
  void clear_conn_name();
  static const int kConnNameFieldNumber = 1;
  const ::std::string& conn_name() const;
  void set_conn_name(const ::std::string& value);
  #if LANG_CXX11
  void set_conn_name(::std::string&& value);
  #endif
  void set_conn_name(const char* value);
  void set_conn_name(const char* value, size_t size);
  ::std::string* mutable_conn_name();
  ::std::string* release_conn_name();
  void set_allocated_conn_name(::std::string* conn_name);

  // required string command = 2;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 2;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  #if LANG_CXX11
  void set_command(::std::string&& value);
  #endif
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // @@protoc_insertion_point(class_scope:peleus.plugins.MysqlVisitorServiceRequest)
 private:
  void set_has_conn_name();
  void clear_has_conn_name();
  void set_has_command();
  void clear_has_command();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr conn_name_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  friend struct ::protobuf_src_2fplugins_2fmysql_5fvisitor_2finterface_2fmysql_5fvisitor_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MysqlVisitorRow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.plugins.MysqlVisitorRow) */ {
 public:
  MysqlVisitorRow();
  virtual ~MysqlVisitorRow();

  MysqlVisitorRow(const MysqlVisitorRow& from);

  inline MysqlVisitorRow& operator=(const MysqlVisitorRow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlVisitorRow(MysqlVisitorRow&& from) noexcept
    : MysqlVisitorRow() {
    *this = ::std::move(from);
  }

  inline MysqlVisitorRow& operator=(MysqlVisitorRow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlVisitorRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlVisitorRow* internal_default_instance() {
    return reinterpret_cast<const MysqlVisitorRow*>(
               &_MysqlVisitorRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MysqlVisitorRow* other);
  friend void swap(MysqlVisitorRow& a, MysqlVisitorRow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlVisitorRow* New() const final {
    return CreateMaybeMessage<MysqlVisitorRow>(NULL);
  }

  MysqlVisitorRow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlVisitorRow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlVisitorRow& from);
  void MergeFrom(const MysqlVisitorRow& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlVisitorRow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string column = 1;
  int column_size() const;
  void clear_column();
  static const int kColumnFieldNumber = 1;
  const ::std::string& column(int index) const;
  ::std::string* mutable_column(int index);
  void set_column(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_column(int index, ::std::string&& value);
  #endif
  void set_column(int index, const char* value);
  void set_column(int index, const char* value, size_t size);
  ::std::string* add_column();
  void add_column(const ::std::string& value);
  #if LANG_CXX11
  void add_column(::std::string&& value);
  #endif
  void add_column(const char* value);
  void add_column(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& column() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_column();

  // @@protoc_insertion_point(class_scope:peleus.plugins.MysqlVisitorRow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> column_;
  friend struct ::protobuf_src_2fplugins_2fmysql_5fvisitor_2finterface_2fmysql_5fvisitor_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MysqlVisitorServiceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.plugins.MysqlVisitorServiceResponse) */ {
 public:
  MysqlVisitorServiceResponse();
  virtual ~MysqlVisitorServiceResponse();

  MysqlVisitorServiceResponse(const MysqlVisitorServiceResponse& from);

  inline MysqlVisitorServiceResponse& operator=(const MysqlVisitorServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MysqlVisitorServiceResponse(MysqlVisitorServiceResponse&& from) noexcept
    : MysqlVisitorServiceResponse() {
    *this = ::std::move(from);
  }

  inline MysqlVisitorServiceResponse& operator=(MysqlVisitorServiceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlVisitorServiceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MysqlVisitorServiceResponse* internal_default_instance() {
    return reinterpret_cast<const MysqlVisitorServiceResponse*>(
               &_MysqlVisitorServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MysqlVisitorServiceResponse* other);
  friend void swap(MysqlVisitorServiceResponse& a, MysqlVisitorServiceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MysqlVisitorServiceResponse* New() const final {
    return CreateMaybeMessage<MysqlVisitorServiceResponse>(NULL);
  }

  MysqlVisitorServiceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MysqlVisitorServiceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MysqlVisitorServiceResponse& from);
  void MergeFrom(const MysqlVisitorServiceResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MysqlVisitorServiceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .peleus.plugins.MysqlVisitorRow rows = 2;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  ::peleus::plugins::MysqlVisitorRow* mutable_rows(int index);
  ::google::protobuf::RepeatedPtrField< ::peleus::plugins::MysqlVisitorRow >*
      mutable_rows();
  const ::peleus::plugins::MysqlVisitorRow& rows(int index) const;
  ::peleus::plugins::MysqlVisitorRow* add_rows();
  const ::google::protobuf::RepeatedPtrField< ::peleus::plugins::MysqlVisitorRow >&
      rows() const;

  // required bool suc = 1;
  bool has_suc() const;
  void clear_suc();
  static const int kSucFieldNumber = 1;
  bool suc() const;
  void set_suc(bool value);

  // @@protoc_insertion_point(class_scope:peleus.plugins.MysqlVisitorServiceResponse)
 private:
  void set_has_suc();
  void clear_has_suc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::peleus::plugins::MysqlVisitorRow > rows_;
  bool suc_;
  friend struct ::protobuf_src_2fplugins_2fmysql_5fvisitor_2finterface_2fmysql_5fvisitor_5fservice_2eproto::TableStruct;
};
// ===================================================================

class MysqlVisitorService_Stub;

class MysqlVisitorService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MysqlVisitorService() {};
 public:
  virtual ~MysqlVisitorService();

  typedef MysqlVisitorService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void query(::google::protobuf::RpcController* controller,
                       const ::peleus::plugins::MysqlVisitorServiceRequest* request,
                       ::peleus::plugins::MysqlVisitorServiceResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MysqlVisitorService);
};

class MysqlVisitorService_Stub : public MysqlVisitorService {
 public:
  MysqlVisitorService_Stub(::google::protobuf::RpcChannel* channel);
  MysqlVisitorService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~MysqlVisitorService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements MysqlVisitorService ------------------------------------------

  void query(::google::protobuf::RpcController* controller,
                       const ::peleus::plugins::MysqlVisitorServiceRequest* request,
                       ::peleus::plugins::MysqlVisitorServiceResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MysqlVisitorService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MysqlVisitorServiceRequest

// required string conn_name = 1;
inline bool MysqlVisitorServiceRequest::has_conn_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MysqlVisitorServiceRequest::set_has_conn_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MysqlVisitorServiceRequest::clear_has_conn_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MysqlVisitorServiceRequest::clear_conn_name() {
  conn_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_conn_name();
}
inline const ::std::string& MysqlVisitorServiceRequest::conn_name() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.MysqlVisitorServiceRequest.conn_name)
  return conn_name_.GetNoArena();
}
inline void MysqlVisitorServiceRequest::set_conn_name(const ::std::string& value) {
  set_has_conn_name();
  conn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.MysqlVisitorServiceRequest.conn_name)
}
#if LANG_CXX11
inline void MysqlVisitorServiceRequest::set_conn_name(::std::string&& value) {
  set_has_conn_name();
  conn_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.MysqlVisitorServiceRequest.conn_name)
}
#endif
inline void MysqlVisitorServiceRequest::set_conn_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_conn_name();
  conn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.MysqlVisitorServiceRequest.conn_name)
}
inline void MysqlVisitorServiceRequest::set_conn_name(const char* value, size_t size) {
  set_has_conn_name();
  conn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.MysqlVisitorServiceRequest.conn_name)
}
inline ::std::string* MysqlVisitorServiceRequest::mutable_conn_name() {
  set_has_conn_name();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.MysqlVisitorServiceRequest.conn_name)
  return conn_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlVisitorServiceRequest::release_conn_name() {
  // @@protoc_insertion_point(field_release:peleus.plugins.MysqlVisitorServiceRequest.conn_name)
  if (!has_conn_name()) {
    return NULL;
  }
  clear_has_conn_name();
  return conn_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlVisitorServiceRequest::set_allocated_conn_name(::std::string* conn_name) {
  if (conn_name != NULL) {
    set_has_conn_name();
  } else {
    clear_has_conn_name();
  }
  conn_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conn_name);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.MysqlVisitorServiceRequest.conn_name)
}

// required string command = 2;
inline bool MysqlVisitorServiceRequest::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MysqlVisitorServiceRequest::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MysqlVisitorServiceRequest::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MysqlVisitorServiceRequest::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command();
}
inline const ::std::string& MysqlVisitorServiceRequest::command() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.MysqlVisitorServiceRequest.command)
  return command_.GetNoArena();
}
inline void MysqlVisitorServiceRequest::set_command(const ::std::string& value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.MysqlVisitorServiceRequest.command)
}
#if LANG_CXX11
inline void MysqlVisitorServiceRequest::set_command(::std::string&& value) {
  set_has_command();
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.MysqlVisitorServiceRequest.command)
}
#endif
inline void MysqlVisitorServiceRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.MysqlVisitorServiceRequest.command)
}
inline void MysqlVisitorServiceRequest::set_command(const char* value, size_t size) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.MysqlVisitorServiceRequest.command)
}
inline ::std::string* MysqlVisitorServiceRequest::mutable_command() {
  set_has_command();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.MysqlVisitorServiceRequest.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MysqlVisitorServiceRequest::release_command() {
  // @@protoc_insertion_point(field_release:peleus.plugins.MysqlVisitorServiceRequest.command)
  if (!has_command()) {
    return NULL;
  }
  clear_has_command();
  return command_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MysqlVisitorServiceRequest::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    set_has_command();
  } else {
    clear_has_command();
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.MysqlVisitorServiceRequest.command)
}

// -------------------------------------------------------------------

// MysqlVisitorRow

// repeated string column = 1;
inline int MysqlVisitorRow::column_size() const {
  return column_.size();
}
inline void MysqlVisitorRow::clear_column() {
  column_.Clear();
}
inline const ::std::string& MysqlVisitorRow::column(int index) const {
  // @@protoc_insertion_point(field_get:peleus.plugins.MysqlVisitorRow.column)
  return column_.Get(index);
}
inline ::std::string* MysqlVisitorRow::mutable_column(int index) {
  // @@protoc_insertion_point(field_mutable:peleus.plugins.MysqlVisitorRow.column)
  return column_.Mutable(index);
}
inline void MysqlVisitorRow::set_column(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:peleus.plugins.MysqlVisitorRow.column)
  column_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MysqlVisitorRow::set_column(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:peleus.plugins.MysqlVisitorRow.column)
  column_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MysqlVisitorRow::set_column(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  column_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:peleus.plugins.MysqlVisitorRow.column)
}
inline void MysqlVisitorRow::set_column(int index, const char* value, size_t size) {
  column_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.MysqlVisitorRow.column)
}
inline ::std::string* MysqlVisitorRow::add_column() {
  // @@protoc_insertion_point(field_add_mutable:peleus.plugins.MysqlVisitorRow.column)
  return column_.Add();
}
inline void MysqlVisitorRow::add_column(const ::std::string& value) {
  column_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:peleus.plugins.MysqlVisitorRow.column)
}
#if LANG_CXX11
inline void MysqlVisitorRow::add_column(::std::string&& value) {
  column_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:peleus.plugins.MysqlVisitorRow.column)
}
#endif
inline void MysqlVisitorRow::add_column(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  column_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:peleus.plugins.MysqlVisitorRow.column)
}
inline void MysqlVisitorRow::add_column(const char* value, size_t size) {
  column_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:peleus.plugins.MysqlVisitorRow.column)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MysqlVisitorRow::column() const {
  // @@protoc_insertion_point(field_list:peleus.plugins.MysqlVisitorRow.column)
  return column_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MysqlVisitorRow::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:peleus.plugins.MysqlVisitorRow.column)
  return &column_;
}

// -------------------------------------------------------------------

// MysqlVisitorServiceResponse

// required bool suc = 1;
inline bool MysqlVisitorServiceResponse::has_suc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MysqlVisitorServiceResponse::set_has_suc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MysqlVisitorServiceResponse::clear_has_suc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MysqlVisitorServiceResponse::clear_suc() {
  suc_ = false;
  clear_has_suc();
}
inline bool MysqlVisitorServiceResponse::suc() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.MysqlVisitorServiceResponse.suc)
  return suc_;
}
inline void MysqlVisitorServiceResponse::set_suc(bool value) {
  set_has_suc();
  suc_ = value;
  // @@protoc_insertion_point(field_set:peleus.plugins.MysqlVisitorServiceResponse.suc)
}

// repeated .peleus.plugins.MysqlVisitorRow rows = 2;
inline int MysqlVisitorServiceResponse::rows_size() const {
  return rows_.size();
}
inline void MysqlVisitorServiceResponse::clear_rows() {
  rows_.Clear();
}
inline ::peleus::plugins::MysqlVisitorRow* MysqlVisitorServiceResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:peleus.plugins.MysqlVisitorServiceResponse.rows)
  return rows_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::peleus::plugins::MysqlVisitorRow >*
MysqlVisitorServiceResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:peleus.plugins.MysqlVisitorServiceResponse.rows)
  return &rows_;
}
inline const ::peleus::plugins::MysqlVisitorRow& MysqlVisitorServiceResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:peleus.plugins.MysqlVisitorServiceResponse.rows)
  return rows_.Get(index);
}
inline ::peleus::plugins::MysqlVisitorRow* MysqlVisitorServiceResponse::add_rows() {
  // @@protoc_insertion_point(field_add:peleus.plugins.MysqlVisitorServiceResponse.rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::peleus::plugins::MysqlVisitorRow >&
MysqlVisitorServiceResponse::rows() const {
  // @@protoc_insertion_point(field_list:peleus.plugins.MysqlVisitorServiceResponse.rows)
  return rows_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace peleus

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_src_2fplugins_2fmysql_5fvisitor_2finterface_2fmysql_5fvisitor_5fservice_2eproto
