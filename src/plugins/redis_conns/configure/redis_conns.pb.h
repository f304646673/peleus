// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/plugins/redis_conns/configure/redis_conns.proto

#ifndef PROTOBUF_INCLUDED_src_2fplugins_2fredis_5fconns_2fconfigure_2fredis_5fconns_2eproto
#define PROTOBUF_INCLUDED_src_2fplugins_2fredis_5fconns_2fconfigure_2fredis_5fconns_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fplugins_2fredis_5fconns_2fconfigure_2fredis_5fconns_2eproto 

namespace protobuf_src_2fplugins_2fredis_5fconns_2fconfigure_2fredis_5fconns_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_src_2fplugins_2fredis_5fconns_2fconfigure_2fredis_5fconns_2eproto
namespace peleus {
namespace plugins {
namespace configure {
class redis_conn_conf;
class redis_conn_confDefaultTypeInternal;
extern redis_conn_confDefaultTypeInternal _redis_conn_conf_default_instance_;
}  // namespace configure
}  // namespace plugins
}  // namespace peleus
namespace google {
namespace protobuf {
template<> ::peleus::plugins::configure::redis_conn_conf* Arena::CreateMaybeMessage<::peleus::plugins::configure::redis_conn_conf>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace peleus {
namespace plugins {
namespace configure {

// ===================================================================

class redis_conn_conf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.plugins.configure.redis_conn_conf) */ {
 public:
  redis_conn_conf();
  virtual ~redis_conn_conf();

  redis_conn_conf(const redis_conn_conf& from);

  inline redis_conn_conf& operator=(const redis_conn_conf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  redis_conn_conf(redis_conn_conf&& from) noexcept
    : redis_conn_conf() {
    *this = ::std::move(from);
  }

  inline redis_conn_conf& operator=(redis_conn_conf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const redis_conn_conf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const redis_conn_conf* internal_default_instance() {
    return reinterpret_cast<const redis_conn_conf*>(
               &_redis_conn_conf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(redis_conn_conf* other);
  friend void swap(redis_conn_conf& a, redis_conn_conf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline redis_conn_conf* New() const final {
    return CreateMaybeMessage<redis_conn_conf>(NULL);
  }

  redis_conn_conf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<redis_conn_conf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const redis_conn_conf& from);
  void MergeFrom(const redis_conn_conf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(redis_conn_conf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string bns_or_ipport = 2;
  bool has_bns_or_ipport() const;
  void clear_bns_or_ipport();
  static const int kBnsOrIpportFieldNumber = 2;
  const ::std::string& bns_or_ipport() const;
  void set_bns_or_ipport(const ::std::string& value);
  #if LANG_CXX11
  void set_bns_or_ipport(::std::string&& value);
  #endif
  void set_bns_or_ipport(const char* value);
  void set_bns_or_ipport(const char* value, size_t size);
  ::std::string* mutable_bns_or_ipport();
  ::std::string* release_bns_or_ipport();
  void set_allocated_bns_or_ipport(::std::string* bns_or_ipport);

  // optional string load_balancer_name = 3 [default = "la"];
  bool has_load_balancer_name() const;
  void clear_load_balancer_name();
  static const int kLoadBalancerNameFieldNumber = 3;
  const ::std::string& load_balancer_name() const;
  void set_load_balancer_name(const ::std::string& value);
  #if LANG_CXX11
  void set_load_balancer_name(::std::string&& value);
  #endif
  void set_load_balancer_name(const char* value);
  void set_load_balancer_name(const char* value, size_t size);
  ::std::string* mutable_load_balancer_name();
  ::std::string* release_load_balancer_name();
  void set_allocated_load_balancer_name(::std::string* load_balancer_name);

  // optional string connect_type = 4 [default = "pooled"];
  bool has_connect_type() const;
  void clear_connect_type();
  static const int kConnectTypeFieldNumber = 4;
  const ::std::string& connect_type() const;
  void set_connect_type(const ::std::string& value);
  #if LANG_CXX11
  void set_connect_type(::std::string&& value);
  #endif
  void set_connect_type(const char* value);
  void set_connect_type(const char* value, size_t size);
  ::std::string* mutable_connect_type();
  ::std::string* release_connect_type();
  void set_allocated_connect_type(::std::string* connect_type);

  // optional int32 backup_request_ms = 7 [default = 150];
  bool has_backup_request_ms() const;
  void clear_backup_request_ms();
  static const int kBackupRequestMsFieldNumber = 7;
  ::google::protobuf::int32 backup_request_ms() const;
  void set_backup_request_ms(::google::protobuf::int32 value);

  // optional int32 timeout_ms = 5 [default = 150];
  bool has_timeout_ms() const;
  void clear_timeout_ms();
  static const int kTimeoutMsFieldNumber = 5;
  ::google::protobuf::int32 timeout_ms() const;
  void set_timeout_ms(::google::protobuf::int32 value);

  // optional int32 max_retry = 6 [default = 3];
  bool has_max_retry() const;
  void clear_max_retry();
  static const int kMaxRetryFieldNumber = 6;
  ::google::protobuf::int32 max_retry() const;
  void set_max_retry(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:peleus.plugins.configure.redis_conn_conf)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_bns_or_ipport();
  void clear_has_bns_or_ipport();
  void set_has_load_balancer_name();
  void clear_has_load_balancer_name();
  void set_has_connect_type();
  void clear_has_connect_type();
  void set_has_timeout_ms();
  void clear_has_timeout_ms();
  void set_has_max_retry();
  void clear_has_max_retry();
  void set_has_backup_request_ms();
  void clear_has_backup_request_ms();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr bns_or_ipport_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_load_balancer_name_;
  private:
  ::google::protobuf::internal::ArenaStringPtr load_balancer_name_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_connect_type_;
  private:
  ::google::protobuf::internal::ArenaStringPtr connect_type_;
  ::google::protobuf::int32 backup_request_ms_;
  ::google::protobuf::int32 timeout_ms_;
  ::google::protobuf::int32 max_retry_;
  friend struct ::protobuf_src_2fplugins_2fredis_5fconns_2fconfigure_2fredis_5fconns_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// redis_conn_conf

// required string name = 1;
inline bool redis_conn_conf::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void redis_conn_conf::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void redis_conn_conf::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void redis_conn_conf::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& redis_conn_conf::name() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.redis_conn_conf.name)
  return name_.GetNoArena();
}
inline void redis_conn_conf::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.redis_conn_conf.name)
}
#if LANG_CXX11
inline void redis_conn_conf::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.configure.redis_conn_conf.name)
}
#endif
inline void redis_conn_conf::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.configure.redis_conn_conf.name)
}
inline void redis_conn_conf::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.configure.redis_conn_conf.name)
}
inline ::std::string* redis_conn_conf::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.configure.redis_conn_conf.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* redis_conn_conf::release_name() {
  // @@protoc_insertion_point(field_release:peleus.plugins.configure.redis_conn_conf.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void redis_conn_conf::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.configure.redis_conn_conf.name)
}

// required string bns_or_ipport = 2;
inline bool redis_conn_conf::has_bns_or_ipport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void redis_conn_conf::set_has_bns_or_ipport() {
  _has_bits_[0] |= 0x00000002u;
}
inline void redis_conn_conf::clear_has_bns_or_ipport() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void redis_conn_conf::clear_bns_or_ipport() {
  bns_or_ipport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bns_or_ipport();
}
inline const ::std::string& redis_conn_conf::bns_or_ipport() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.redis_conn_conf.bns_or_ipport)
  return bns_or_ipport_.GetNoArena();
}
inline void redis_conn_conf::set_bns_or_ipport(const ::std::string& value) {
  set_has_bns_or_ipport();
  bns_or_ipport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.redis_conn_conf.bns_or_ipport)
}
#if LANG_CXX11
inline void redis_conn_conf::set_bns_or_ipport(::std::string&& value) {
  set_has_bns_or_ipport();
  bns_or_ipport_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.configure.redis_conn_conf.bns_or_ipport)
}
#endif
inline void redis_conn_conf::set_bns_or_ipport(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bns_or_ipport();
  bns_or_ipport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.configure.redis_conn_conf.bns_or_ipport)
}
inline void redis_conn_conf::set_bns_or_ipport(const char* value, size_t size) {
  set_has_bns_or_ipport();
  bns_or_ipport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.configure.redis_conn_conf.bns_or_ipport)
}
inline ::std::string* redis_conn_conf::mutable_bns_or_ipport() {
  set_has_bns_or_ipport();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.configure.redis_conn_conf.bns_or_ipport)
  return bns_or_ipport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* redis_conn_conf::release_bns_or_ipport() {
  // @@protoc_insertion_point(field_release:peleus.plugins.configure.redis_conn_conf.bns_or_ipport)
  if (!has_bns_or_ipport()) {
    return NULL;
  }
  clear_has_bns_or_ipport();
  return bns_or_ipport_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void redis_conn_conf::set_allocated_bns_or_ipport(::std::string* bns_or_ipport) {
  if (bns_or_ipport != NULL) {
    set_has_bns_or_ipport();
  } else {
    clear_has_bns_or_ipport();
  }
  bns_or_ipport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bns_or_ipport);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.configure.redis_conn_conf.bns_or_ipport)
}

// optional string load_balancer_name = 3 [default = "la"];
inline bool redis_conn_conf::has_load_balancer_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void redis_conn_conf::set_has_load_balancer_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void redis_conn_conf::clear_has_load_balancer_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void redis_conn_conf::clear_load_balancer_name() {
  load_balancer_name_.ClearToDefaultNoArena(&::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_load_balancer_name_.get());
  clear_has_load_balancer_name();
}
inline const ::std::string& redis_conn_conf::load_balancer_name() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.redis_conn_conf.load_balancer_name)
  return load_balancer_name_.GetNoArena();
}
inline void redis_conn_conf::set_load_balancer_name(const ::std::string& value) {
  set_has_load_balancer_name();
  load_balancer_name_.SetNoArena(&::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_load_balancer_name_.get(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.redis_conn_conf.load_balancer_name)
}
#if LANG_CXX11
inline void redis_conn_conf::set_load_balancer_name(::std::string&& value) {
  set_has_load_balancer_name();
  load_balancer_name_.SetNoArena(
    &::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_load_balancer_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.configure.redis_conn_conf.load_balancer_name)
}
#endif
inline void redis_conn_conf::set_load_balancer_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_load_balancer_name();
  load_balancer_name_.SetNoArena(&::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_load_balancer_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.configure.redis_conn_conf.load_balancer_name)
}
inline void redis_conn_conf::set_load_balancer_name(const char* value, size_t size) {
  set_has_load_balancer_name();
  load_balancer_name_.SetNoArena(&::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_load_balancer_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.configure.redis_conn_conf.load_balancer_name)
}
inline ::std::string* redis_conn_conf::mutable_load_balancer_name() {
  set_has_load_balancer_name();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.configure.redis_conn_conf.load_balancer_name)
  return load_balancer_name_.MutableNoArena(&::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_load_balancer_name_.get());
}
inline ::std::string* redis_conn_conf::release_load_balancer_name() {
  // @@protoc_insertion_point(field_release:peleus.plugins.configure.redis_conn_conf.load_balancer_name)
  if (!has_load_balancer_name()) {
    return NULL;
  }
  clear_has_load_balancer_name();
  return load_balancer_name_.ReleaseNonDefaultNoArena(&::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_load_balancer_name_.get());
}
inline void redis_conn_conf::set_allocated_load_balancer_name(::std::string* load_balancer_name) {
  if (load_balancer_name != NULL) {
    set_has_load_balancer_name();
  } else {
    clear_has_load_balancer_name();
  }
  load_balancer_name_.SetAllocatedNoArena(&::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_load_balancer_name_.get(), load_balancer_name);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.configure.redis_conn_conf.load_balancer_name)
}

// optional string connect_type = 4 [default = "pooled"];
inline bool redis_conn_conf::has_connect_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void redis_conn_conf::set_has_connect_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void redis_conn_conf::clear_has_connect_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void redis_conn_conf::clear_connect_type() {
  connect_type_.ClearToDefaultNoArena(&::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_connect_type_.get());
  clear_has_connect_type();
}
inline const ::std::string& redis_conn_conf::connect_type() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.redis_conn_conf.connect_type)
  return connect_type_.GetNoArena();
}
inline void redis_conn_conf::set_connect_type(const ::std::string& value) {
  set_has_connect_type();
  connect_type_.SetNoArena(&::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_connect_type_.get(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.redis_conn_conf.connect_type)
}
#if LANG_CXX11
inline void redis_conn_conf::set_connect_type(::std::string&& value) {
  set_has_connect_type();
  connect_type_.SetNoArena(
    &::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_connect_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.configure.redis_conn_conf.connect_type)
}
#endif
inline void redis_conn_conf::set_connect_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connect_type();
  connect_type_.SetNoArena(&::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_connect_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.configure.redis_conn_conf.connect_type)
}
inline void redis_conn_conf::set_connect_type(const char* value, size_t size) {
  set_has_connect_type();
  connect_type_.SetNoArena(&::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_connect_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.configure.redis_conn_conf.connect_type)
}
inline ::std::string* redis_conn_conf::mutable_connect_type() {
  set_has_connect_type();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.configure.redis_conn_conf.connect_type)
  return connect_type_.MutableNoArena(&::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_connect_type_.get());
}
inline ::std::string* redis_conn_conf::release_connect_type() {
  // @@protoc_insertion_point(field_release:peleus.plugins.configure.redis_conn_conf.connect_type)
  if (!has_connect_type()) {
    return NULL;
  }
  clear_has_connect_type();
  return connect_type_.ReleaseNonDefaultNoArena(&::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_connect_type_.get());
}
inline void redis_conn_conf::set_allocated_connect_type(::std::string* connect_type) {
  if (connect_type != NULL) {
    set_has_connect_type();
  } else {
    clear_has_connect_type();
  }
  connect_type_.SetAllocatedNoArena(&::peleus::plugins::configure::redis_conn_conf::_i_give_permission_to_break_this_code_default_connect_type_.get(), connect_type);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.configure.redis_conn_conf.connect_type)
}

// optional int32 timeout_ms = 5 [default = 150];
inline bool redis_conn_conf::has_timeout_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void redis_conn_conf::set_has_timeout_ms() {
  _has_bits_[0] |= 0x00000020u;
}
inline void redis_conn_conf::clear_has_timeout_ms() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void redis_conn_conf::clear_timeout_ms() {
  timeout_ms_ = 150;
  clear_has_timeout_ms();
}
inline ::google::protobuf::int32 redis_conn_conf::timeout_ms() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.redis_conn_conf.timeout_ms)
  return timeout_ms_;
}
inline void redis_conn_conf::set_timeout_ms(::google::protobuf::int32 value) {
  set_has_timeout_ms();
  timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.redis_conn_conf.timeout_ms)
}

// optional int32 max_retry = 6 [default = 3];
inline bool redis_conn_conf::has_max_retry() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void redis_conn_conf::set_has_max_retry() {
  _has_bits_[0] |= 0x00000040u;
}
inline void redis_conn_conf::clear_has_max_retry() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void redis_conn_conf::clear_max_retry() {
  max_retry_ = 3;
  clear_has_max_retry();
}
inline ::google::protobuf::int32 redis_conn_conf::max_retry() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.redis_conn_conf.max_retry)
  return max_retry_;
}
inline void redis_conn_conf::set_max_retry(::google::protobuf::int32 value) {
  set_has_max_retry();
  max_retry_ = value;
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.redis_conn_conf.max_retry)
}

// optional int32 backup_request_ms = 7 [default = 150];
inline bool redis_conn_conf::has_backup_request_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void redis_conn_conf::set_has_backup_request_ms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void redis_conn_conf::clear_has_backup_request_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void redis_conn_conf::clear_backup_request_ms() {
  backup_request_ms_ = 150;
  clear_has_backup_request_ms();
}
inline ::google::protobuf::int32 redis_conn_conf::backup_request_ms() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.redis_conn_conf.backup_request_ms)
  return backup_request_ms_;
}
inline void redis_conn_conf::set_backup_request_ms(::google::protobuf::int32 value) {
  set_has_backup_request_ms();
  backup_request_ms_ = value;
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.redis_conn_conf.backup_request_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace configure
}  // namespace plugins
}  // namespace peleus

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_src_2fplugins_2fredis_5fconns_2fconfigure_2fredis_5fconns_2eproto
