// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/plugins/redis_visitor/interface/redis_visitor_service.proto

#ifndef PROTOBUF_INCLUDED_src_2fplugins_2fredis_5fvisitor_2finterface_2fredis_5fvisitor_5fservice_2eproto
#define PROTOBUF_INCLUDED_src_2fplugins_2fredis_5fvisitor_2finterface_2fredis_5fvisitor_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fplugins_2fredis_5fvisitor_2finterface_2fredis_5fvisitor_5fservice_2eproto 

namespace protobuf_src_2fplugins_2fredis_5fvisitor_2finterface_2fredis_5fvisitor_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_src_2fplugins_2fredis_5fvisitor_2finterface_2fredis_5fvisitor_5fservice_2eproto
namespace peleus {
namespace plugins {
class RedisVisitorReply;
class RedisVisitorReplyDefaultTypeInternal;
extern RedisVisitorReplyDefaultTypeInternal _RedisVisitorReply_default_instance_;
class RedisVisitorServiceRequest;
class RedisVisitorServiceRequestDefaultTypeInternal;
extern RedisVisitorServiceRequestDefaultTypeInternal _RedisVisitorServiceRequest_default_instance_;
class RedisVisitorServiceResponse;
class RedisVisitorServiceResponseDefaultTypeInternal;
extern RedisVisitorServiceResponseDefaultTypeInternal _RedisVisitorServiceResponse_default_instance_;
}  // namespace plugins
}  // namespace peleus
namespace google {
namespace protobuf {
template<> ::peleus::plugins::RedisVisitorReply* Arena::CreateMaybeMessage<::peleus::plugins::RedisVisitorReply>(Arena*);
template<> ::peleus::plugins::RedisVisitorServiceRequest* Arena::CreateMaybeMessage<::peleus::plugins::RedisVisitorServiceRequest>(Arena*);
template<> ::peleus::plugins::RedisVisitorServiceResponse* Arena::CreateMaybeMessage<::peleus::plugins::RedisVisitorServiceResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace peleus {
namespace plugins {

enum RedisVisitorReply_ReplyType {
  RedisVisitorReply_ReplyType_NIL = 0,
  RedisVisitorReply_ReplyType_INTEGER = 1,
  RedisVisitorReply_ReplyType_ERROR = 2,
  RedisVisitorReply_ReplyType_STRING = 3,
  RedisVisitorReply_ReplyType_ARRAY = 4
};
bool RedisVisitorReply_ReplyType_IsValid(int value);
const RedisVisitorReply_ReplyType RedisVisitorReply_ReplyType_ReplyType_MIN = RedisVisitorReply_ReplyType_NIL;
const RedisVisitorReply_ReplyType RedisVisitorReply_ReplyType_ReplyType_MAX = RedisVisitorReply_ReplyType_ARRAY;
const int RedisVisitorReply_ReplyType_ReplyType_ARRAYSIZE = RedisVisitorReply_ReplyType_ReplyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RedisVisitorReply_ReplyType_descriptor();
inline const ::std::string& RedisVisitorReply_ReplyType_Name(RedisVisitorReply_ReplyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RedisVisitorReply_ReplyType_descriptor(), value);
}
inline bool RedisVisitorReply_ReplyType_Parse(
    const ::std::string& name, RedisVisitorReply_ReplyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RedisVisitorReply_ReplyType>(
    RedisVisitorReply_ReplyType_descriptor(), name, value);
}
// ===================================================================

class RedisVisitorServiceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.plugins.RedisVisitorServiceRequest) */ {
 public:
  RedisVisitorServiceRequest();
  virtual ~RedisVisitorServiceRequest();

  RedisVisitorServiceRequest(const RedisVisitorServiceRequest& from);

  inline RedisVisitorServiceRequest& operator=(const RedisVisitorServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedisVisitorServiceRequest(RedisVisitorServiceRequest&& from) noexcept
    : RedisVisitorServiceRequest() {
    *this = ::std::move(from);
  }

  inline RedisVisitorServiceRequest& operator=(RedisVisitorServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedisVisitorServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedisVisitorServiceRequest* internal_default_instance() {
    return reinterpret_cast<const RedisVisitorServiceRequest*>(
               &_RedisVisitorServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RedisVisitorServiceRequest* other);
  friend void swap(RedisVisitorServiceRequest& a, RedisVisitorServiceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedisVisitorServiceRequest* New() const final {
    return CreateMaybeMessage<RedisVisitorServiceRequest>(NULL);
  }

  RedisVisitorServiceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RedisVisitorServiceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RedisVisitorServiceRequest& from);
  void MergeFrom(const RedisVisitorServiceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedisVisitorServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string conn_name = 1;
  bool has_conn_name() const;
  void clear_conn_name();
  static const int kConnNameFieldNumber = 1;
  const ::std::string& conn_name() const;
  void set_conn_name(const ::std::string& value);
  #if LANG_CXX11
  void set_conn_name(::std::string&& value);
  #endif
  void set_conn_name(const char* value);
  void set_conn_name(const char* value, size_t size);
  ::std::string* mutable_conn_name();
  ::std::string* release_conn_name();
  void set_allocated_conn_name(::std::string* conn_name);

  // required string command = 2;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 2;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  #if LANG_CXX11
  void set_command(::std::string&& value);
  #endif
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // @@protoc_insertion_point(class_scope:peleus.plugins.RedisVisitorServiceRequest)
 private:
  void set_has_conn_name();
  void clear_has_conn_name();
  void set_has_command();
  void clear_has_command();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr conn_name_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  friend struct ::protobuf_src_2fplugins_2fredis_5fvisitor_2finterface_2fredis_5fvisitor_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RedisVisitorReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.plugins.RedisVisitorReply) */ {
 public:
  RedisVisitorReply();
  virtual ~RedisVisitorReply();

  RedisVisitorReply(const RedisVisitorReply& from);

  inline RedisVisitorReply& operator=(const RedisVisitorReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedisVisitorReply(RedisVisitorReply&& from) noexcept
    : RedisVisitorReply() {
    *this = ::std::move(from);
  }

  inline RedisVisitorReply& operator=(RedisVisitorReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedisVisitorReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedisVisitorReply* internal_default_instance() {
    return reinterpret_cast<const RedisVisitorReply*>(
               &_RedisVisitorReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RedisVisitorReply* other);
  friend void swap(RedisVisitorReply& a, RedisVisitorReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedisVisitorReply* New() const final {
    return CreateMaybeMessage<RedisVisitorReply>(NULL);
  }

  RedisVisitorReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RedisVisitorReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RedisVisitorReply& from);
  void MergeFrom(const RedisVisitorReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedisVisitorReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RedisVisitorReply_ReplyType ReplyType;
  static const ReplyType NIL =
    RedisVisitorReply_ReplyType_NIL;
  static const ReplyType INTEGER =
    RedisVisitorReply_ReplyType_INTEGER;
  static const ReplyType ERROR =
    RedisVisitorReply_ReplyType_ERROR;
  static const ReplyType STRING =
    RedisVisitorReply_ReplyType_STRING;
  static const ReplyType ARRAY =
    RedisVisitorReply_ReplyType_ARRAY;
  static inline bool ReplyType_IsValid(int value) {
    return RedisVisitorReply_ReplyType_IsValid(value);
  }
  static const ReplyType ReplyType_MIN =
    RedisVisitorReply_ReplyType_ReplyType_MIN;
  static const ReplyType ReplyType_MAX =
    RedisVisitorReply_ReplyType_ReplyType_MAX;
  static const int ReplyType_ARRAYSIZE =
    RedisVisitorReply_ReplyType_ReplyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReplyType_descriptor() {
    return RedisVisitorReply_ReplyType_descriptor();
  }
  static inline const ::std::string& ReplyType_Name(ReplyType value) {
    return RedisVisitorReply_ReplyType_Name(value);
  }
  static inline bool ReplyType_Parse(const ::std::string& name,
      ReplyType* value) {
    return RedisVisitorReply_ReplyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .peleus.plugins.RedisVisitorReply replies = 5;
  int replies_size() const;
  void clear_replies();
  static const int kRepliesFieldNumber = 5;
  ::peleus::plugins::RedisVisitorReply* mutable_replies(int index);
  ::google::protobuf::RepeatedPtrField< ::peleus::plugins::RedisVisitorReply >*
      mutable_replies();
  const ::peleus::plugins::RedisVisitorReply& replies(int index) const;
  ::peleus::plugins::RedisVisitorReply* add_replies();
  const ::google::protobuf::RepeatedPtrField< ::peleus::plugins::RedisVisitorReply >&
      replies() const;

  // optional string error_message = 3 [default = ""];
  bool has_error_message() const;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 3;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // optional string c_str = 4 [default = ""];
  bool has_c_str() const;
  void clear_c_str();
  static const int kCStrFieldNumber = 4;
  const ::std::string& c_str() const;
  void set_c_str(const ::std::string& value);
  #if LANG_CXX11
  void set_c_str(::std::string&& value);
  #endif
  void set_c_str(const char* value);
  void set_c_str(const char* value, size_t size);
  ::std::string* mutable_c_str();
  ::std::string* release_c_str();
  void set_allocated_c_str(::std::string* c_str);

  // optional int64 integer = 2 [default = 0];
  bool has_integer() const;
  void clear_integer();
  static const int kIntegerFieldNumber = 2;
  ::google::protobuf::int64 integer() const;
  void set_integer(::google::protobuf::int64 value);

  // required .peleus.plugins.RedisVisitorReply.ReplyType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::peleus::plugins::RedisVisitorReply_ReplyType type() const;
  void set_type(::peleus::plugins::RedisVisitorReply_ReplyType value);

  // @@protoc_insertion_point(class_scope:peleus.plugins.RedisVisitorReply)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_integer();
  void clear_has_integer();
  void set_has_error_message();
  void clear_has_error_message();
  void set_has_c_str();
  void clear_has_c_str();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::peleus::plugins::RedisVisitorReply > replies_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::internal::ArenaStringPtr c_str_;
  ::google::protobuf::int64 integer_;
  int type_;
  friend struct ::protobuf_src_2fplugins_2fredis_5fvisitor_2finterface_2fredis_5fvisitor_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RedisVisitorServiceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.plugins.RedisVisitorServiceResponse) */ {
 public:
  RedisVisitorServiceResponse();
  virtual ~RedisVisitorServiceResponse();

  RedisVisitorServiceResponse(const RedisVisitorServiceResponse& from);

  inline RedisVisitorServiceResponse& operator=(const RedisVisitorServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedisVisitorServiceResponse(RedisVisitorServiceResponse&& from) noexcept
    : RedisVisitorServiceResponse() {
    *this = ::std::move(from);
  }

  inline RedisVisitorServiceResponse& operator=(RedisVisitorServiceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedisVisitorServiceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedisVisitorServiceResponse* internal_default_instance() {
    return reinterpret_cast<const RedisVisitorServiceResponse*>(
               &_RedisVisitorServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RedisVisitorServiceResponse* other);
  friend void swap(RedisVisitorServiceResponse& a, RedisVisitorServiceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedisVisitorServiceResponse* New() const final {
    return CreateMaybeMessage<RedisVisitorServiceResponse>(NULL);
  }

  RedisVisitorServiceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RedisVisitorServiceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RedisVisitorServiceResponse& from);
  void MergeFrom(const RedisVisitorServiceResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedisVisitorServiceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .peleus.plugins.RedisVisitorReply reply = 2;
  bool has_reply() const;
  void clear_reply();
  static const int kReplyFieldNumber = 2;
  private:
  const ::peleus::plugins::RedisVisitorReply& _internal_reply() const;
  public:
  const ::peleus::plugins::RedisVisitorReply& reply() const;
  ::peleus::plugins::RedisVisitorReply* release_reply();
  ::peleus::plugins::RedisVisitorReply* mutable_reply();
  void set_allocated_reply(::peleus::plugins::RedisVisitorReply* reply);

  // required bool suc = 1;
  bool has_suc() const;
  void clear_suc();
  static const int kSucFieldNumber = 1;
  bool suc() const;
  void set_suc(bool value);

  // @@protoc_insertion_point(class_scope:peleus.plugins.RedisVisitorServiceResponse)
 private:
  void set_has_suc();
  void clear_has_suc();
  void set_has_reply();
  void clear_has_reply();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::peleus::plugins::RedisVisitorReply* reply_;
  bool suc_;
  friend struct ::protobuf_src_2fplugins_2fredis_5fvisitor_2finterface_2fredis_5fvisitor_5fservice_2eproto::TableStruct;
};
// ===================================================================

class RedisVisitorService_Stub;

class RedisVisitorService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RedisVisitorService() {};
 public:
  virtual ~RedisVisitorService();

  typedef RedisVisitorService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void query(::google::protobuf::RpcController* controller,
                       const ::peleus::plugins::RedisVisitorServiceRequest* request,
                       ::peleus::plugins::RedisVisitorServiceResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RedisVisitorService);
};

class RedisVisitorService_Stub : public RedisVisitorService {
 public:
  RedisVisitorService_Stub(::google::protobuf::RpcChannel* channel);
  RedisVisitorService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~RedisVisitorService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements RedisVisitorService ------------------------------------------

  void query(::google::protobuf::RpcController* controller,
                       const ::peleus::plugins::RedisVisitorServiceRequest* request,
                       ::peleus::plugins::RedisVisitorServiceResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RedisVisitorService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RedisVisitorServiceRequest

// required string conn_name = 1;
inline bool RedisVisitorServiceRequest::has_conn_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedisVisitorServiceRequest::set_has_conn_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedisVisitorServiceRequest::clear_has_conn_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedisVisitorServiceRequest::clear_conn_name() {
  conn_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_conn_name();
}
inline const ::std::string& RedisVisitorServiceRequest::conn_name() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.RedisVisitorServiceRequest.conn_name)
  return conn_name_.GetNoArena();
}
inline void RedisVisitorServiceRequest::set_conn_name(const ::std::string& value) {
  set_has_conn_name();
  conn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.RedisVisitorServiceRequest.conn_name)
}
#if LANG_CXX11
inline void RedisVisitorServiceRequest::set_conn_name(::std::string&& value) {
  set_has_conn_name();
  conn_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.RedisVisitorServiceRequest.conn_name)
}
#endif
inline void RedisVisitorServiceRequest::set_conn_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_conn_name();
  conn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.RedisVisitorServiceRequest.conn_name)
}
inline void RedisVisitorServiceRequest::set_conn_name(const char* value, size_t size) {
  set_has_conn_name();
  conn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.RedisVisitorServiceRequest.conn_name)
}
inline ::std::string* RedisVisitorServiceRequest::mutable_conn_name() {
  set_has_conn_name();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.RedisVisitorServiceRequest.conn_name)
  return conn_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedisVisitorServiceRequest::release_conn_name() {
  // @@protoc_insertion_point(field_release:peleus.plugins.RedisVisitorServiceRequest.conn_name)
  if (!has_conn_name()) {
    return NULL;
  }
  clear_has_conn_name();
  return conn_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedisVisitorServiceRequest::set_allocated_conn_name(::std::string* conn_name) {
  if (conn_name != NULL) {
    set_has_conn_name();
  } else {
    clear_has_conn_name();
  }
  conn_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conn_name);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.RedisVisitorServiceRequest.conn_name)
}

// required string command = 2;
inline bool RedisVisitorServiceRequest::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedisVisitorServiceRequest::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedisVisitorServiceRequest::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedisVisitorServiceRequest::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command();
}
inline const ::std::string& RedisVisitorServiceRequest::command() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.RedisVisitorServiceRequest.command)
  return command_.GetNoArena();
}
inline void RedisVisitorServiceRequest::set_command(const ::std::string& value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.RedisVisitorServiceRequest.command)
}
#if LANG_CXX11
inline void RedisVisitorServiceRequest::set_command(::std::string&& value) {
  set_has_command();
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.RedisVisitorServiceRequest.command)
}
#endif
inline void RedisVisitorServiceRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.RedisVisitorServiceRequest.command)
}
inline void RedisVisitorServiceRequest::set_command(const char* value, size_t size) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.RedisVisitorServiceRequest.command)
}
inline ::std::string* RedisVisitorServiceRequest::mutable_command() {
  set_has_command();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.RedisVisitorServiceRequest.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedisVisitorServiceRequest::release_command() {
  // @@protoc_insertion_point(field_release:peleus.plugins.RedisVisitorServiceRequest.command)
  if (!has_command()) {
    return NULL;
  }
  clear_has_command();
  return command_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedisVisitorServiceRequest::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    set_has_command();
  } else {
    clear_has_command();
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.RedisVisitorServiceRequest.command)
}

// -------------------------------------------------------------------

// RedisVisitorReply

// required .peleus.plugins.RedisVisitorReply.ReplyType type = 1;
inline bool RedisVisitorReply::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RedisVisitorReply::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RedisVisitorReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RedisVisitorReply::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::peleus::plugins::RedisVisitorReply_ReplyType RedisVisitorReply::type() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.RedisVisitorReply.type)
  return static_cast< ::peleus::plugins::RedisVisitorReply_ReplyType >(type_);
}
inline void RedisVisitorReply::set_type(::peleus::plugins::RedisVisitorReply_ReplyType value) {
  assert(::peleus::plugins::RedisVisitorReply_ReplyType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:peleus.plugins.RedisVisitorReply.type)
}

// optional int64 integer = 2 [default = 0];
inline bool RedisVisitorReply::has_integer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RedisVisitorReply::set_has_integer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RedisVisitorReply::clear_has_integer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RedisVisitorReply::clear_integer() {
  integer_ = GOOGLE_LONGLONG(0);
  clear_has_integer();
}
inline ::google::protobuf::int64 RedisVisitorReply::integer() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.RedisVisitorReply.integer)
  return integer_;
}
inline void RedisVisitorReply::set_integer(::google::protobuf::int64 value) {
  set_has_integer();
  integer_ = value;
  // @@protoc_insertion_point(field_set:peleus.plugins.RedisVisitorReply.integer)
}

// optional string error_message = 3 [default = ""];
inline bool RedisVisitorReply::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedisVisitorReply::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedisVisitorReply::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedisVisitorReply::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
inline const ::std::string& RedisVisitorReply::error_message() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.RedisVisitorReply.error_message)
  return error_message_.GetNoArena();
}
inline void RedisVisitorReply::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.RedisVisitorReply.error_message)
}
#if LANG_CXX11
inline void RedisVisitorReply::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.RedisVisitorReply.error_message)
}
#endif
inline void RedisVisitorReply::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.RedisVisitorReply.error_message)
}
inline void RedisVisitorReply::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.RedisVisitorReply.error_message)
}
inline ::std::string* RedisVisitorReply::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.RedisVisitorReply.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedisVisitorReply::release_error_message() {
  // @@protoc_insertion_point(field_release:peleus.plugins.RedisVisitorReply.error_message)
  if (!has_error_message()) {
    return NULL;
  }
  clear_has_error_message();
  return error_message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedisVisitorReply::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.RedisVisitorReply.error_message)
}

// optional string c_str = 4 [default = ""];
inline bool RedisVisitorReply::has_c_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedisVisitorReply::set_has_c_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedisVisitorReply::clear_has_c_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedisVisitorReply::clear_c_str() {
  c_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_c_str();
}
inline const ::std::string& RedisVisitorReply::c_str() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.RedisVisitorReply.c_str)
  return c_str_.GetNoArena();
}
inline void RedisVisitorReply::set_c_str(const ::std::string& value) {
  set_has_c_str();
  c_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.RedisVisitorReply.c_str)
}
#if LANG_CXX11
inline void RedisVisitorReply::set_c_str(::std::string&& value) {
  set_has_c_str();
  c_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.RedisVisitorReply.c_str)
}
#endif
inline void RedisVisitorReply::set_c_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_c_str();
  c_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.RedisVisitorReply.c_str)
}
inline void RedisVisitorReply::set_c_str(const char* value, size_t size) {
  set_has_c_str();
  c_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.RedisVisitorReply.c_str)
}
inline ::std::string* RedisVisitorReply::mutable_c_str() {
  set_has_c_str();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.RedisVisitorReply.c_str)
  return c_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedisVisitorReply::release_c_str() {
  // @@protoc_insertion_point(field_release:peleus.plugins.RedisVisitorReply.c_str)
  if (!has_c_str()) {
    return NULL;
  }
  clear_has_c_str();
  return c_str_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedisVisitorReply::set_allocated_c_str(::std::string* c_str) {
  if (c_str != NULL) {
    set_has_c_str();
  } else {
    clear_has_c_str();
  }
  c_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), c_str);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.RedisVisitorReply.c_str)
}

// repeated .peleus.plugins.RedisVisitorReply replies = 5;
inline int RedisVisitorReply::replies_size() const {
  return replies_.size();
}
inline void RedisVisitorReply::clear_replies() {
  replies_.Clear();
}
inline ::peleus::plugins::RedisVisitorReply* RedisVisitorReply::mutable_replies(int index) {
  // @@protoc_insertion_point(field_mutable:peleus.plugins.RedisVisitorReply.replies)
  return replies_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::peleus::plugins::RedisVisitorReply >*
RedisVisitorReply::mutable_replies() {
  // @@protoc_insertion_point(field_mutable_list:peleus.plugins.RedisVisitorReply.replies)
  return &replies_;
}
inline const ::peleus::plugins::RedisVisitorReply& RedisVisitorReply::replies(int index) const {
  // @@protoc_insertion_point(field_get:peleus.plugins.RedisVisitorReply.replies)
  return replies_.Get(index);
}
inline ::peleus::plugins::RedisVisitorReply* RedisVisitorReply::add_replies() {
  // @@protoc_insertion_point(field_add:peleus.plugins.RedisVisitorReply.replies)
  return replies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::peleus::plugins::RedisVisitorReply >&
RedisVisitorReply::replies() const {
  // @@protoc_insertion_point(field_list:peleus.plugins.RedisVisitorReply.replies)
  return replies_;
}

// -------------------------------------------------------------------

// RedisVisitorServiceResponse

// required bool suc = 1;
inline bool RedisVisitorServiceResponse::has_suc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedisVisitorServiceResponse::set_has_suc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedisVisitorServiceResponse::clear_has_suc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedisVisitorServiceResponse::clear_suc() {
  suc_ = false;
  clear_has_suc();
}
inline bool RedisVisitorServiceResponse::suc() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.RedisVisitorServiceResponse.suc)
  return suc_;
}
inline void RedisVisitorServiceResponse::set_suc(bool value) {
  set_has_suc();
  suc_ = value;
  // @@protoc_insertion_point(field_set:peleus.plugins.RedisVisitorServiceResponse.suc)
}

// required .peleus.plugins.RedisVisitorReply reply = 2;
inline bool RedisVisitorServiceResponse::has_reply() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedisVisitorServiceResponse::set_has_reply() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedisVisitorServiceResponse::clear_has_reply() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedisVisitorServiceResponse::clear_reply() {
  if (reply_ != NULL) reply_->Clear();
  clear_has_reply();
}
inline const ::peleus::plugins::RedisVisitorReply& RedisVisitorServiceResponse::_internal_reply() const {
  return *reply_;
}
inline const ::peleus::plugins::RedisVisitorReply& RedisVisitorServiceResponse::reply() const {
  const ::peleus::plugins::RedisVisitorReply* p = reply_;
  // @@protoc_insertion_point(field_get:peleus.plugins.RedisVisitorServiceResponse.reply)
  return p != NULL ? *p : *reinterpret_cast<const ::peleus::plugins::RedisVisitorReply*>(
      &::peleus::plugins::_RedisVisitorReply_default_instance_);
}
inline ::peleus::plugins::RedisVisitorReply* RedisVisitorServiceResponse::release_reply() {
  // @@protoc_insertion_point(field_release:peleus.plugins.RedisVisitorServiceResponse.reply)
  clear_has_reply();
  ::peleus::plugins::RedisVisitorReply* temp = reply_;
  reply_ = NULL;
  return temp;
}
inline ::peleus::plugins::RedisVisitorReply* RedisVisitorServiceResponse::mutable_reply() {
  set_has_reply();
  if (reply_ == NULL) {
    auto* p = CreateMaybeMessage<::peleus::plugins::RedisVisitorReply>(GetArenaNoVirtual());
    reply_ = p;
  }
  // @@protoc_insertion_point(field_mutable:peleus.plugins.RedisVisitorServiceResponse.reply)
  return reply_;
}
inline void RedisVisitorServiceResponse::set_allocated_reply(::peleus::plugins::RedisVisitorReply* reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reply_;
  }
  if (reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reply, submessage_arena);
    }
    set_has_reply();
  } else {
    clear_has_reply();
  }
  reply_ = reply;
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.RedisVisitorServiceResponse.reply)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace peleus

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::peleus::plugins::RedisVisitorReply_ReplyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::peleus::plugins::RedisVisitorReply_ReplyType>() {
  return ::peleus::plugins::RedisVisitorReply_ReplyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_src_2fplugins_2fredis_5fvisitor_2finterface_2fredis_5fvisitor_5fservice_2eproto
