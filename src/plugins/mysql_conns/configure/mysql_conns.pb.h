// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/plugins/mysql_conns/configure/mysql_conns.proto

#ifndef PROTOBUF_INCLUDED_src_2fplugins_2fmysql_5fconns_2fconfigure_2fmysql_5fconns_2eproto
#define PROTOBUF_INCLUDED_src_2fplugins_2fmysql_5fconns_2fconfigure_2fmysql_5fconns_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fplugins_2fmysql_5fconns_2fconfigure_2fmysql_5fconns_2eproto 

namespace protobuf_src_2fplugins_2fmysql_5fconns_2fconfigure_2fmysql_5fconns_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_src_2fplugins_2fmysql_5fconns_2fconfigure_2fmysql_5fconns_2eproto
namespace peleus {
namespace plugins {
namespace configure {
class mysql_connection;
class mysql_connectionDefaultTypeInternal;
extern mysql_connectionDefaultTypeInternal _mysql_connection_default_instance_;
class mysql_connection_pool;
class mysql_connection_poolDefaultTypeInternal;
extern mysql_connection_poolDefaultTypeInternal _mysql_connection_pool_default_instance_;
}  // namespace configure
}  // namespace plugins
}  // namespace peleus
namespace google {
namespace protobuf {
template<> ::peleus::plugins::configure::mysql_connection* Arena::CreateMaybeMessage<::peleus::plugins::configure::mysql_connection>(Arena*);
template<> ::peleus::plugins::configure::mysql_connection_pool* Arena::CreateMaybeMessage<::peleus::plugins::configure::mysql_connection_pool>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace peleus {
namespace plugins {
namespace configure {

// ===================================================================

class mysql_connection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.plugins.configure.mysql_connection) */ {
 public:
  mysql_connection();
  virtual ~mysql_connection();

  mysql_connection(const mysql_connection& from);

  inline mysql_connection& operator=(const mysql_connection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mysql_connection(mysql_connection&& from) noexcept
    : mysql_connection() {
    *this = ::std::move(from);
  }

  inline mysql_connection& operator=(mysql_connection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mysql_connection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mysql_connection* internal_default_instance() {
    return reinterpret_cast<const mysql_connection*>(
               &_mysql_connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(mysql_connection* other);
  friend void swap(mysql_connection& a, mysql_connection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mysql_connection* New() const final {
    return CreateMaybeMessage<mysql_connection>(NULL);
  }

  mysql_connection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mysql_connection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mysql_connection& from);
  void MergeFrom(const mysql_connection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mysql_connection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string host = 1;
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // required string user = 3;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 3;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // required string password = 4;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // required string dbname = 5;
  bool has_dbname() const;
  void clear_dbname();
  static const int kDbnameFieldNumber = 5;
  const ::std::string& dbname() const;
  void set_dbname(const ::std::string& value);
  #if LANG_CXX11
  void set_dbname(::std::string&& value);
  #endif
  void set_dbname(const char* value);
  void set_dbname(const char* value, size_t size);
  ::std::string* mutable_dbname();
  ::std::string* release_dbname();
  void set_allocated_dbname(::std::string* dbname);

  // optional string character_set = 8 [default = "utf8"];
  bool has_character_set() const;
  void clear_character_set();
  static const int kCharacterSetFieldNumber = 8;
  const ::std::string& character_set() const;
  void set_character_set(const ::std::string& value);
  #if LANG_CXX11
  void set_character_set(::std::string&& value);
  #endif
  void set_character_set(const char* value);
  void set_character_set(const char* value, size_t size);
  ::std::string* mutable_character_set();
  ::std::string* release_character_set();
  void set_allocated_character_set(::std::string* character_set);

  // required int32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // optional uint32 read_timeout = 6 [default = 0];
  bool has_read_timeout() const;
  void clear_read_timeout();
  static const int kReadTimeoutFieldNumber = 6;
  ::google::protobuf::uint32 read_timeout() const;
  void set_read_timeout(::google::protobuf::uint32 value);

  // optional uint32 conn_timeout = 7 [default = 0];
  bool has_conn_timeout() const;
  void clear_conn_timeout();
  static const int kConnTimeoutFieldNumber = 7;
  ::google::protobuf::uint32 conn_timeout() const;
  void set_conn_timeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:peleus.plugins.configure.mysql_connection)
 private:
  void set_has_host();
  void clear_has_host();
  void set_has_port();
  void clear_has_port();
  void set_has_user();
  void clear_has_user();
  void set_has_password();
  void clear_has_password();
  void set_has_dbname();
  void clear_has_dbname();
  void set_has_read_timeout();
  void clear_has_read_timeout();
  void set_has_conn_timeout();
  void clear_has_conn_timeout();
  void set_has_character_set();
  void clear_has_character_set();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr dbname_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_character_set_;
  private:
  ::google::protobuf::internal::ArenaStringPtr character_set_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::uint32 read_timeout_;
  ::google::protobuf::uint32 conn_timeout_;
  friend struct ::protobuf_src_2fplugins_2fmysql_5fconns_2fconfigure_2fmysql_5fconns_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class mysql_connection_pool : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.plugins.configure.mysql_connection_pool) */ {
 public:
  mysql_connection_pool();
  virtual ~mysql_connection_pool();

  mysql_connection_pool(const mysql_connection_pool& from);

  inline mysql_connection_pool& operator=(const mysql_connection_pool& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mysql_connection_pool(mysql_connection_pool&& from) noexcept
    : mysql_connection_pool() {
    *this = ::std::move(from);
  }

  inline mysql_connection_pool& operator=(mysql_connection_pool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mysql_connection_pool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mysql_connection_pool* internal_default_instance() {
    return reinterpret_cast<const mysql_connection_pool*>(
               &_mysql_connection_pool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(mysql_connection_pool* other);
  friend void swap(mysql_connection_pool& a, mysql_connection_pool& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mysql_connection_pool* New() const final {
    return CreateMaybeMessage<mysql_connection_pool>(NULL);
  }

  mysql_connection_pool* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mysql_connection_pool>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mysql_connection_pool& from);
  void MergeFrom(const mysql_connection_pool& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mysql_connection_pool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .peleus.plugins.configure.mysql_connection conn_info = 3;
  bool has_conn_info() const;
  void clear_conn_info();
  static const int kConnInfoFieldNumber = 3;
  private:
  const ::peleus::plugins::configure::mysql_connection& _internal_conn_info() const;
  public:
  const ::peleus::plugins::configure::mysql_connection& conn_info() const;
  ::peleus::plugins::configure::mysql_connection* release_conn_info();
  ::peleus::plugins::configure::mysql_connection* mutable_conn_info();
  void set_allocated_conn_info(::peleus::plugins::configure::mysql_connection* conn_info);

  // required int32 size = 2;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:peleus.plugins.configure.mysql_connection_pool)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_size();
  void clear_has_size();
  void set_has_conn_info();
  void clear_has_conn_info();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::peleus::plugins::configure::mysql_connection* conn_info_;
  ::google::protobuf::int32 size_;
  friend struct ::protobuf_src_2fplugins_2fmysql_5fconns_2fconfigure_2fmysql_5fconns_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// mysql_connection

// required string host = 1;
inline bool mysql_connection::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mysql_connection::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mysql_connection::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mysql_connection::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
inline const ::std::string& mysql_connection::host() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.mysql_connection.host)
  return host_.GetNoArena();
}
inline void mysql_connection::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.mysql_connection.host)
}
#if LANG_CXX11
inline void mysql_connection::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.configure.mysql_connection.host)
}
#endif
inline void mysql_connection::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.configure.mysql_connection.host)
}
inline void mysql_connection::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.configure.mysql_connection.host)
}
inline ::std::string* mysql_connection::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.configure.mysql_connection.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mysql_connection::release_host() {
  // @@protoc_insertion_point(field_release:peleus.plugins.configure.mysql_connection.host)
  if (!has_host()) {
    return NULL;
  }
  clear_has_host();
  return host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mysql_connection::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.configure.mysql_connection.host)
}

// required int32 port = 2;
inline bool mysql_connection::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mysql_connection::set_has_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mysql_connection::clear_has_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mysql_connection::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 mysql_connection::port() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.mysql_connection.port)
  return port_;
}
inline void mysql_connection::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.mysql_connection.port)
}

// required string user = 3;
inline bool mysql_connection::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mysql_connection::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mysql_connection::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mysql_connection::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& mysql_connection::user() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.mysql_connection.user)
  return user_.GetNoArena();
}
inline void mysql_connection::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.mysql_connection.user)
}
#if LANG_CXX11
inline void mysql_connection::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.configure.mysql_connection.user)
}
#endif
inline void mysql_connection::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.configure.mysql_connection.user)
}
inline void mysql_connection::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.configure.mysql_connection.user)
}
inline ::std::string* mysql_connection::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.configure.mysql_connection.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mysql_connection::release_user() {
  // @@protoc_insertion_point(field_release:peleus.plugins.configure.mysql_connection.user)
  if (!has_user()) {
    return NULL;
  }
  clear_has_user();
  return user_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mysql_connection::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.configure.mysql_connection.user)
}

// required string password = 4;
inline bool mysql_connection::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mysql_connection::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mysql_connection::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mysql_connection::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& mysql_connection::password() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.mysql_connection.password)
  return password_.GetNoArena();
}
inline void mysql_connection::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.mysql_connection.password)
}
#if LANG_CXX11
inline void mysql_connection::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.configure.mysql_connection.password)
}
#endif
inline void mysql_connection::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.configure.mysql_connection.password)
}
inline void mysql_connection::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.configure.mysql_connection.password)
}
inline ::std::string* mysql_connection::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.configure.mysql_connection.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mysql_connection::release_password() {
  // @@protoc_insertion_point(field_release:peleus.plugins.configure.mysql_connection.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mysql_connection::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.configure.mysql_connection.password)
}

// required string dbname = 5;
inline bool mysql_connection::has_dbname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mysql_connection::set_has_dbname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mysql_connection::clear_has_dbname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mysql_connection::clear_dbname() {
  dbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dbname();
}
inline const ::std::string& mysql_connection::dbname() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.mysql_connection.dbname)
  return dbname_.GetNoArena();
}
inline void mysql_connection::set_dbname(const ::std::string& value) {
  set_has_dbname();
  dbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.mysql_connection.dbname)
}
#if LANG_CXX11
inline void mysql_connection::set_dbname(::std::string&& value) {
  set_has_dbname();
  dbname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.configure.mysql_connection.dbname)
}
#endif
inline void mysql_connection::set_dbname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dbname();
  dbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.configure.mysql_connection.dbname)
}
inline void mysql_connection::set_dbname(const char* value, size_t size) {
  set_has_dbname();
  dbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.configure.mysql_connection.dbname)
}
inline ::std::string* mysql_connection::mutable_dbname() {
  set_has_dbname();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.configure.mysql_connection.dbname)
  return dbname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mysql_connection::release_dbname() {
  // @@protoc_insertion_point(field_release:peleus.plugins.configure.mysql_connection.dbname)
  if (!has_dbname()) {
    return NULL;
  }
  clear_has_dbname();
  return dbname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mysql_connection::set_allocated_dbname(::std::string* dbname) {
  if (dbname != NULL) {
    set_has_dbname();
  } else {
    clear_has_dbname();
  }
  dbname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbname);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.configure.mysql_connection.dbname)
}

// optional uint32 read_timeout = 6 [default = 0];
inline bool mysql_connection::has_read_timeout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mysql_connection::set_has_read_timeout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mysql_connection::clear_has_read_timeout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mysql_connection::clear_read_timeout() {
  read_timeout_ = 0u;
  clear_has_read_timeout();
}
inline ::google::protobuf::uint32 mysql_connection::read_timeout() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.mysql_connection.read_timeout)
  return read_timeout_;
}
inline void mysql_connection::set_read_timeout(::google::protobuf::uint32 value) {
  set_has_read_timeout();
  read_timeout_ = value;
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.mysql_connection.read_timeout)
}

// optional uint32 conn_timeout = 7 [default = 0];
inline bool mysql_connection::has_conn_timeout() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mysql_connection::set_has_conn_timeout() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mysql_connection::clear_has_conn_timeout() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mysql_connection::clear_conn_timeout() {
  conn_timeout_ = 0u;
  clear_has_conn_timeout();
}
inline ::google::protobuf::uint32 mysql_connection::conn_timeout() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.mysql_connection.conn_timeout)
  return conn_timeout_;
}
inline void mysql_connection::set_conn_timeout(::google::protobuf::uint32 value) {
  set_has_conn_timeout();
  conn_timeout_ = value;
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.mysql_connection.conn_timeout)
}

// optional string character_set = 8 [default = "utf8"];
inline bool mysql_connection::has_character_set() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mysql_connection::set_has_character_set() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mysql_connection::clear_has_character_set() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mysql_connection::clear_character_set() {
  character_set_.ClearToDefaultNoArena(&::peleus::plugins::configure::mysql_connection::_i_give_permission_to_break_this_code_default_character_set_.get());
  clear_has_character_set();
}
inline const ::std::string& mysql_connection::character_set() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.mysql_connection.character_set)
  return character_set_.GetNoArena();
}
inline void mysql_connection::set_character_set(const ::std::string& value) {
  set_has_character_set();
  character_set_.SetNoArena(&::peleus::plugins::configure::mysql_connection::_i_give_permission_to_break_this_code_default_character_set_.get(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.mysql_connection.character_set)
}
#if LANG_CXX11
inline void mysql_connection::set_character_set(::std::string&& value) {
  set_has_character_set();
  character_set_.SetNoArena(
    &::peleus::plugins::configure::mysql_connection::_i_give_permission_to_break_this_code_default_character_set_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.configure.mysql_connection.character_set)
}
#endif
inline void mysql_connection::set_character_set(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_character_set();
  character_set_.SetNoArena(&::peleus::plugins::configure::mysql_connection::_i_give_permission_to_break_this_code_default_character_set_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.configure.mysql_connection.character_set)
}
inline void mysql_connection::set_character_set(const char* value, size_t size) {
  set_has_character_set();
  character_set_.SetNoArena(&::peleus::plugins::configure::mysql_connection::_i_give_permission_to_break_this_code_default_character_set_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.configure.mysql_connection.character_set)
}
inline ::std::string* mysql_connection::mutable_character_set() {
  set_has_character_set();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.configure.mysql_connection.character_set)
  return character_set_.MutableNoArena(&::peleus::plugins::configure::mysql_connection::_i_give_permission_to_break_this_code_default_character_set_.get());
}
inline ::std::string* mysql_connection::release_character_set() {
  // @@protoc_insertion_point(field_release:peleus.plugins.configure.mysql_connection.character_set)
  if (!has_character_set()) {
    return NULL;
  }
  clear_has_character_set();
  return character_set_.ReleaseNonDefaultNoArena(&::peleus::plugins::configure::mysql_connection::_i_give_permission_to_break_this_code_default_character_set_.get());
}
inline void mysql_connection::set_allocated_character_set(::std::string* character_set) {
  if (character_set != NULL) {
    set_has_character_set();
  } else {
    clear_has_character_set();
  }
  character_set_.SetAllocatedNoArena(&::peleus::plugins::configure::mysql_connection::_i_give_permission_to_break_this_code_default_character_set_.get(), character_set);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.configure.mysql_connection.character_set)
}

// -------------------------------------------------------------------

// mysql_connection_pool

// required string name = 1;
inline bool mysql_connection_pool::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mysql_connection_pool::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mysql_connection_pool::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mysql_connection_pool::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& mysql_connection_pool::name() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.mysql_connection_pool.name)
  return name_.GetNoArena();
}
inline void mysql_connection_pool::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.mysql_connection_pool.name)
}
#if LANG_CXX11
inline void mysql_connection_pool::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.configure.mysql_connection_pool.name)
}
#endif
inline void mysql_connection_pool::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.configure.mysql_connection_pool.name)
}
inline void mysql_connection_pool::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.configure.mysql_connection_pool.name)
}
inline ::std::string* mysql_connection_pool::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.configure.mysql_connection_pool.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mysql_connection_pool::release_name() {
  // @@protoc_insertion_point(field_release:peleus.plugins.configure.mysql_connection_pool.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mysql_connection_pool::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.configure.mysql_connection_pool.name)
}

// required int32 size = 2;
inline bool mysql_connection_pool::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mysql_connection_pool::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mysql_connection_pool::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mysql_connection_pool::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 mysql_connection_pool::size() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.mysql_connection_pool.size)
  return size_;
}
inline void mysql_connection_pool::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:peleus.plugins.configure.mysql_connection_pool.size)
}

// required .peleus.plugins.configure.mysql_connection conn_info = 3;
inline bool mysql_connection_pool::has_conn_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mysql_connection_pool::set_has_conn_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mysql_connection_pool::clear_has_conn_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mysql_connection_pool::clear_conn_info() {
  if (conn_info_ != NULL) conn_info_->Clear();
  clear_has_conn_info();
}
inline const ::peleus::plugins::configure::mysql_connection& mysql_connection_pool::_internal_conn_info() const {
  return *conn_info_;
}
inline const ::peleus::plugins::configure::mysql_connection& mysql_connection_pool::conn_info() const {
  const ::peleus::plugins::configure::mysql_connection* p = conn_info_;
  // @@protoc_insertion_point(field_get:peleus.plugins.configure.mysql_connection_pool.conn_info)
  return p != NULL ? *p : *reinterpret_cast<const ::peleus::plugins::configure::mysql_connection*>(
      &::peleus::plugins::configure::_mysql_connection_default_instance_);
}
inline ::peleus::plugins::configure::mysql_connection* mysql_connection_pool::release_conn_info() {
  // @@protoc_insertion_point(field_release:peleus.plugins.configure.mysql_connection_pool.conn_info)
  clear_has_conn_info();
  ::peleus::plugins::configure::mysql_connection* temp = conn_info_;
  conn_info_ = NULL;
  return temp;
}
inline ::peleus::plugins::configure::mysql_connection* mysql_connection_pool::mutable_conn_info() {
  set_has_conn_info();
  if (conn_info_ == NULL) {
    auto* p = CreateMaybeMessage<::peleus::plugins::configure::mysql_connection>(GetArenaNoVirtual());
    conn_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:peleus.plugins.configure.mysql_connection_pool.conn_info)
  return conn_info_;
}
inline void mysql_connection_pool::set_allocated_conn_info(::peleus::plugins::configure::mysql_connection* conn_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete conn_info_;
  }
  if (conn_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conn_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conn_info, submessage_arena);
    }
    set_has_conn_info();
  } else {
    clear_has_conn_info();
  }
  conn_info_ = conn_info;
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.configure.mysql_connection_pool.conn_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace configure
}  // namespace plugins
}  // namespace peleus

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_src_2fplugins_2fmysql_5fconns_2fconfigure_2fmysql_5fconns_2eproto
