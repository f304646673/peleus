// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/plugins/http_conns/interface/http.proto

#ifndef PROTOBUF_INCLUDED_src_2fplugins_2fhttp_5fconns_2finterface_2fhttp_2eproto
#define PROTOBUF_INCLUDED_src_2fplugins_2fhttp_5fconns_2finterface_2fhttp_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fplugins_2fhttp_5fconns_2finterface_2fhttp_2eproto 

namespace protobuf_src_2fplugins_2fhttp_5fconns_2finterface_2fhttp_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_src_2fplugins_2fhttp_5fconns_2finterface_2fhttp_2eproto
namespace peleus {
namespace plugins {
class HttpRequest;
class HttpRequestDefaultTypeInternal;
extern HttpRequestDefaultTypeInternal _HttpRequest_default_instance_;
class HttpResponse;
class HttpResponseDefaultTypeInternal;
extern HttpResponseDefaultTypeInternal _HttpResponse_default_instance_;
}  // namespace plugins
}  // namespace peleus
namespace google {
namespace protobuf {
template<> ::peleus::plugins::HttpRequest* Arena::CreateMaybeMessage<::peleus::plugins::HttpRequest>(Arena*);
template<> ::peleus::plugins::HttpResponse* Arena::CreateMaybeMessage<::peleus::plugins::HttpResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace peleus {
namespace plugins {

// ===================================================================

class HttpRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.plugins.HttpRequest) */ {
 public:
  HttpRequest();
  virtual ~HttpRequest();

  HttpRequest(const HttpRequest& from);

  inline HttpRequest& operator=(const HttpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpRequest(HttpRequest&& from) noexcept
    : HttpRequest() {
    *this = ::std::move(from);
  }

  inline HttpRequest& operator=(HttpRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpRequest* internal_default_instance() {
    return reinterpret_cast<const HttpRequest*>(
               &_HttpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HttpRequest* other);
  friend void swap(HttpRequest& a, HttpRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpRequest* New() const final {
    return CreateMaybeMessage<HttpRequest>(NULL);
  }

  HttpRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HttpRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HttpRequest& from);
  void MergeFrom(const HttpRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string conn_name = 1;
  bool has_conn_name() const;
  void clear_conn_name();
  static const int kConnNameFieldNumber = 1;
  const ::std::string& conn_name() const;
  void set_conn_name(const ::std::string& value);
  #if LANG_CXX11
  void set_conn_name(::std::string&& value);
  #endif
  void set_conn_name(const char* value);
  void set_conn_name(const char* value, size_t size);
  ::std::string* mutable_conn_name();
  ::std::string* release_conn_name();
  void set_allocated_conn_name(::std::string* conn_name);

  // required string uri = 2;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string post_data = 4;
  bool has_post_data() const;
  void clear_post_data();
  static const int kPostDataFieldNumber = 4;
  const ::std::string& post_data() const;
  void set_post_data(const ::std::string& value);
  #if LANG_CXX11
  void set_post_data(::std::string&& value);
  #endif
  void set_post_data(const char* value);
  void set_post_data(const char* value, size_t size);
  ::std::string* mutable_post_data();
  ::std::string* release_post_data();
  void set_allocated_post_data(::std::string* post_data);

  // required bool post = 3;
  bool has_post() const;
  void clear_post();
  static const int kPostFieldNumber = 3;
  bool post() const;
  void set_post(bool value);

  // @@protoc_insertion_point(class_scope:peleus.plugins.HttpRequest)
 private:
  void set_has_conn_name();
  void clear_has_conn_name();
  void set_has_uri();
  void clear_has_uri();
  void set_has_post();
  void clear_has_post();
  void set_has_post_data();
  void clear_has_post_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr conn_name_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr post_data_;
  bool post_;
  friend struct ::protobuf_src_2fplugins_2fhttp_5fconns_2finterface_2fhttp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HttpResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.plugins.HttpResponse) */ {
 public:
  HttpResponse();
  virtual ~HttpResponse();

  HttpResponse(const HttpResponse& from);

  inline HttpResponse& operator=(const HttpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpResponse(HttpResponse&& from) noexcept
    : HttpResponse() {
    *this = ::std::move(from);
  }

  inline HttpResponse& operator=(HttpResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpResponse* internal_default_instance() {
    return reinterpret_cast<const HttpResponse*>(
               &_HttpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HttpResponse* other);
  friend void swap(HttpResponse& a, HttpResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpResponse* New() const final {
    return CreateMaybeMessage<HttpResponse>(NULL);
  }

  HttpResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HttpResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HttpResponse& from);
  void MergeFrom(const HttpResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string error_text = 2;
  bool has_error_text() const;
  void clear_error_text();
  static const int kErrorTextFieldNumber = 2;
  const ::std::string& error_text() const;
  void set_error_text(const ::std::string& value);
  #if LANG_CXX11
  void set_error_text(::std::string&& value);
  #endif
  void set_error_text(const char* value);
  void set_error_text(const char* value, size_t size);
  ::std::string* mutable_error_text();
  ::std::string* release_error_text();
  void set_allocated_error_text(::std::string* error_text);

  // optional string response = 3;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 3;
  const ::std::string& response() const;
  void set_response(const ::std::string& value);
  #if LANG_CXX11
  void set_response(::std::string&& value);
  #endif
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  ::std::string* mutable_response();
  ::std::string* release_response();
  void set_allocated_response(::std::string* response);

  // required int32 error_code = 1;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:peleus.plugins.HttpResponse)
 private:
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_text();
  void clear_has_error_text();
  void set_has_response();
  void clear_has_response();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_text_;
  ::google::protobuf::internal::ArenaStringPtr response_;
  ::google::protobuf::int32 error_code_;
  friend struct ::protobuf_src_2fplugins_2fhttp_5fconns_2finterface_2fhttp_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HttpRequest

// required string conn_name = 1;
inline bool HttpRequest::has_conn_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpRequest::set_has_conn_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpRequest::clear_has_conn_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpRequest::clear_conn_name() {
  conn_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_conn_name();
}
inline const ::std::string& HttpRequest::conn_name() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.HttpRequest.conn_name)
  return conn_name_.GetNoArena();
}
inline void HttpRequest::set_conn_name(const ::std::string& value) {
  set_has_conn_name();
  conn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.HttpRequest.conn_name)
}
#if LANG_CXX11
inline void HttpRequest::set_conn_name(::std::string&& value) {
  set_has_conn_name();
  conn_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.HttpRequest.conn_name)
}
#endif
inline void HttpRequest::set_conn_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_conn_name();
  conn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.HttpRequest.conn_name)
}
inline void HttpRequest::set_conn_name(const char* value, size_t size) {
  set_has_conn_name();
  conn_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.HttpRequest.conn_name)
}
inline ::std::string* HttpRequest::mutable_conn_name() {
  set_has_conn_name();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.HttpRequest.conn_name)
  return conn_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpRequest::release_conn_name() {
  // @@protoc_insertion_point(field_release:peleus.plugins.HttpRequest.conn_name)
  if (!has_conn_name()) {
    return NULL;
  }
  clear_has_conn_name();
  return conn_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpRequest::set_allocated_conn_name(::std::string* conn_name) {
  if (conn_name != NULL) {
    set_has_conn_name();
  } else {
    clear_has_conn_name();
  }
  conn_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conn_name);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.HttpRequest.conn_name)
}

// required string uri = 2;
inline bool HttpRequest::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HttpRequest::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HttpRequest::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HttpRequest::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& HttpRequest::uri() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.HttpRequest.uri)
  return uri_.GetNoArena();
}
inline void HttpRequest::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.HttpRequest.uri)
}
#if LANG_CXX11
inline void HttpRequest::set_uri(::std::string&& value) {
  set_has_uri();
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.HttpRequest.uri)
}
#endif
inline void HttpRequest::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.HttpRequest.uri)
}
inline void HttpRequest::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.HttpRequest.uri)
}
inline ::std::string* HttpRequest::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.HttpRequest.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpRequest::release_uri() {
  // @@protoc_insertion_point(field_release:peleus.plugins.HttpRequest.uri)
  if (!has_uri()) {
    return NULL;
  }
  clear_has_uri();
  return uri_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpRequest::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.HttpRequest.uri)
}

// required bool post = 3;
inline bool HttpRequest::has_post() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HttpRequest::set_has_post() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HttpRequest::clear_has_post() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HttpRequest::clear_post() {
  post_ = false;
  clear_has_post();
}
inline bool HttpRequest::post() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.HttpRequest.post)
  return post_;
}
inline void HttpRequest::set_post(bool value) {
  set_has_post();
  post_ = value;
  // @@protoc_insertion_point(field_set:peleus.plugins.HttpRequest.post)
}

// optional string post_data = 4;
inline bool HttpRequest::has_post_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HttpRequest::set_has_post_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HttpRequest::clear_has_post_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HttpRequest::clear_post_data() {
  post_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_post_data();
}
inline const ::std::string& HttpRequest::post_data() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.HttpRequest.post_data)
  return post_data_.GetNoArena();
}
inline void HttpRequest::set_post_data(const ::std::string& value) {
  set_has_post_data();
  post_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.HttpRequest.post_data)
}
#if LANG_CXX11
inline void HttpRequest::set_post_data(::std::string&& value) {
  set_has_post_data();
  post_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.HttpRequest.post_data)
}
#endif
inline void HttpRequest::set_post_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_post_data();
  post_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.HttpRequest.post_data)
}
inline void HttpRequest::set_post_data(const char* value, size_t size) {
  set_has_post_data();
  post_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.HttpRequest.post_data)
}
inline ::std::string* HttpRequest::mutable_post_data() {
  set_has_post_data();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.HttpRequest.post_data)
  return post_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpRequest::release_post_data() {
  // @@protoc_insertion_point(field_release:peleus.plugins.HttpRequest.post_data)
  if (!has_post_data()) {
    return NULL;
  }
  clear_has_post_data();
  return post_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpRequest::set_allocated_post_data(::std::string* post_data) {
  if (post_data != NULL) {
    set_has_post_data();
  } else {
    clear_has_post_data();
  }
  post_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), post_data);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.HttpRequest.post_data)
}

// -------------------------------------------------------------------

// HttpResponse

// required int32 error_code = 1;
inline bool HttpResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HttpResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HttpResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HttpResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 HttpResponse::error_code() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.HttpResponse.error_code)
  return error_code_;
}
inline void HttpResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:peleus.plugins.HttpResponse.error_code)
}

// required string error_text = 2;
inline bool HttpResponse::has_error_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpResponse::set_has_error_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpResponse::clear_has_error_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpResponse::clear_error_text() {
  error_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_text();
}
inline const ::std::string& HttpResponse::error_text() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.HttpResponse.error_text)
  return error_text_.GetNoArena();
}
inline void HttpResponse::set_error_text(const ::std::string& value) {
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.HttpResponse.error_text)
}
#if LANG_CXX11
inline void HttpResponse::set_error_text(::std::string&& value) {
  set_has_error_text();
  error_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.HttpResponse.error_text)
}
#endif
inline void HttpResponse::set_error_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.HttpResponse.error_text)
}
inline void HttpResponse::set_error_text(const char* value, size_t size) {
  set_has_error_text();
  error_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.HttpResponse.error_text)
}
inline ::std::string* HttpResponse::mutable_error_text() {
  set_has_error_text();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.HttpResponse.error_text)
  return error_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpResponse::release_error_text() {
  // @@protoc_insertion_point(field_release:peleus.plugins.HttpResponse.error_text)
  if (!has_error_text()) {
    return NULL;
  }
  clear_has_error_text();
  return error_text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpResponse::set_allocated_error_text(::std::string* error_text) {
  if (error_text != NULL) {
    set_has_error_text();
  } else {
    clear_has_error_text();
  }
  error_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_text);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.HttpResponse.error_text)
}

// optional string response = 3;
inline bool HttpResponse::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HttpResponse::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HttpResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HttpResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_response();
}
inline const ::std::string& HttpResponse::response() const {
  // @@protoc_insertion_point(field_get:peleus.plugins.HttpResponse.response)
  return response_.GetNoArena();
}
inline void HttpResponse::set_response(const ::std::string& value) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.plugins.HttpResponse.response)
}
#if LANG_CXX11
inline void HttpResponse::set_response(::std::string&& value) {
  set_has_response();
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.plugins.HttpResponse.response)
}
#endif
inline void HttpResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.plugins.HttpResponse.response)
}
inline void HttpResponse::set_response(const char* value, size_t size) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.plugins.HttpResponse.response)
}
inline ::std::string* HttpResponse::mutable_response() {
  set_has_response();
  // @@protoc_insertion_point(field_mutable:peleus.plugins.HttpResponse.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpResponse::release_response() {
  // @@protoc_insertion_point(field_release:peleus.plugins.HttpResponse.response)
  if (!has_response()) {
    return NULL;
  }
  clear_has_response();
  return response_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpResponse::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    set_has_response();
  } else {
    clear_has_response();
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:peleus.plugins.HttpResponse.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace peleus

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_src_2fplugins_2fhttp_5fconns_2finterface_2fhttp_2eproto
