// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/modules/configure/server.proto

#ifndef PROTOBUF_INCLUDED_src_2fmodules_2fconfigure_2fserver_2eproto
#define PROTOBUF_INCLUDED_src_2fmodules_2fconfigure_2fserver_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fmodules_2fconfigure_2fserver_2eproto 

namespace protobuf_src_2fmodules_2fconfigure_2fserver_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_src_2fmodules_2fconfigure_2fserver_2eproto
namespace peleus {
namespace modules {
namespace configure {
class server_conf;
class server_confDefaultTypeInternal;
extern server_confDefaultTypeInternal _server_conf_default_instance_;
}  // namespace configure
}  // namespace modules
}  // namespace peleus
namespace google {
namespace protobuf {
template<> ::peleus::modules::configure::server_conf* Arena::CreateMaybeMessage<::peleus::modules::configure::server_conf>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace peleus {
namespace modules {
namespace configure {

enum mc_pack_type {
  FORMAT_COMPACK = 0,
  FORMAT_MCPACK_V2 = 1,
  FORMAT_NONE = 2
};
bool mc_pack_type_IsValid(int value);
const mc_pack_type mc_pack_type_MIN = FORMAT_COMPACK;
const mc_pack_type mc_pack_type_MAX = FORMAT_NONE;
const int mc_pack_type_ARRAYSIZE = mc_pack_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* mc_pack_type_descriptor();
inline const ::std::string& mc_pack_type_Name(mc_pack_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    mc_pack_type_descriptor(), value);
}
inline bool mc_pack_type_Parse(
    const ::std::string& name, mc_pack_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<mc_pack_type>(
    mc_pack_type_descriptor(), name, value);
}
// ===================================================================

class server_conf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.modules.configure.server_conf) */ {
 public:
  server_conf();
  virtual ~server_conf();

  server_conf(const server_conf& from);

  inline server_conf& operator=(const server_conf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  server_conf(server_conf&& from) noexcept
    : server_conf() {
    *this = ::std::move(from);
  }

  inline server_conf& operator=(server_conf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const server_conf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const server_conf* internal_default_instance() {
    return reinterpret_cast<const server_conf*>(
               &_server_conf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(server_conf* other);
  friend void swap(server_conf& a, server_conf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline server_conf* New() const final {
    return CreateMaybeMessage<server_conf>(NULL);
  }

  server_conf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<server_conf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const server_conf& from);
  void MergeFrom(const server_conf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(server_conf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string main_server_conf_path = 1;
  bool has_main_server_conf_path() const;
  void clear_main_server_conf_path();
  static const int kMainServerConfPathFieldNumber = 1;
  const ::std::string& main_server_conf_path() const;
  void set_main_server_conf_path(const ::std::string& value);
  #if LANG_CXX11
  void set_main_server_conf_path(::std::string&& value);
  #endif
  void set_main_server_conf_path(const char* value);
  void set_main_server_conf_path(const char* value, size_t size);
  ::std::string* mutable_main_server_conf_path();
  ::std::string* release_main_server_conf_path();
  void set_allocated_main_server_conf_path(::std::string* main_server_conf_path);

  // required int32 idle_timeout_sec = 2;
  bool has_idle_timeout_sec() const;
  void clear_idle_timeout_sec();
  static const int kIdleTimeoutSecFieldNumber = 2;
  ::google::protobuf::int32 idle_timeout_sec() const;
  void set_idle_timeout_sec(::google::protobuf::int32 value);

  // required int32 max_concurrency = 3;
  bool has_max_concurrency() const;
  void clear_max_concurrency();
  static const int kMaxConcurrencyFieldNumber = 3;
  ::google::protobuf::int32 max_concurrency() const;
  void set_max_concurrency(::google::protobuf::int32 value);

  // required int32 internal_port = 4;
  bool has_internal_port() const;
  void clear_internal_port();
  static const int kInternalPortFieldNumber = 4;
  ::google::protobuf::int32 internal_port() const;
  void set_internal_port(::google::protobuf::int32 value);

  // required int32 port = 5;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // required int32 num_threads = 6;
  bool has_num_threads() const;
  void clear_num_threads();
  static const int kNumThreadsFieldNumber = 6;
  ::google::protobuf::int32 num_threads() const;
  void set_num_threads(::google::protobuf::int32 value);

  // optional .peleus.modules.configure.mc_pack_type mcpack_type = 7 [default = FORMAT_NONE];
  bool has_mcpack_type() const;
  void clear_mcpack_type();
  static const int kMcpackTypeFieldNumber = 7;
  ::peleus::modules::configure::mc_pack_type mcpack_type() const;
  void set_mcpack_type(::peleus::modules::configure::mc_pack_type value);

  // @@protoc_insertion_point(class_scope:peleus.modules.configure.server_conf)
 private:
  void set_has_main_server_conf_path();
  void clear_has_main_server_conf_path();
  void set_has_idle_timeout_sec();
  void clear_has_idle_timeout_sec();
  void set_has_max_concurrency();
  void clear_has_max_concurrency();
  void set_has_internal_port();
  void clear_has_internal_port();
  void set_has_port();
  void clear_has_port();
  void set_has_num_threads();
  void clear_has_num_threads();
  void set_has_mcpack_type();
  void clear_has_mcpack_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr main_server_conf_path_;
  ::google::protobuf::int32 idle_timeout_sec_;
  ::google::protobuf::int32 max_concurrency_;
  ::google::protobuf::int32 internal_port_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 num_threads_;
  int mcpack_type_;
  friend struct ::protobuf_src_2fmodules_2fconfigure_2fserver_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// server_conf

// required string main_server_conf_path = 1;
inline bool server_conf::has_main_server_conf_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void server_conf::set_has_main_server_conf_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void server_conf::clear_has_main_server_conf_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void server_conf::clear_main_server_conf_path() {
  main_server_conf_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_main_server_conf_path();
}
inline const ::std::string& server_conf::main_server_conf_path() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.server_conf.main_server_conf_path)
  return main_server_conf_path_.GetNoArena();
}
inline void server_conf::set_main_server_conf_path(const ::std::string& value) {
  set_has_main_server_conf_path();
  main_server_conf_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.modules.configure.server_conf.main_server_conf_path)
}
#if LANG_CXX11
inline void server_conf::set_main_server_conf_path(::std::string&& value) {
  set_has_main_server_conf_path();
  main_server_conf_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.modules.configure.server_conf.main_server_conf_path)
}
#endif
inline void server_conf::set_main_server_conf_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_main_server_conf_path();
  main_server_conf_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.modules.configure.server_conf.main_server_conf_path)
}
inline void server_conf::set_main_server_conf_path(const char* value, size_t size) {
  set_has_main_server_conf_path();
  main_server_conf_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.modules.configure.server_conf.main_server_conf_path)
}
inline ::std::string* server_conf::mutable_main_server_conf_path() {
  set_has_main_server_conf_path();
  // @@protoc_insertion_point(field_mutable:peleus.modules.configure.server_conf.main_server_conf_path)
  return main_server_conf_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* server_conf::release_main_server_conf_path() {
  // @@protoc_insertion_point(field_release:peleus.modules.configure.server_conf.main_server_conf_path)
  if (!has_main_server_conf_path()) {
    return NULL;
  }
  clear_has_main_server_conf_path();
  return main_server_conf_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void server_conf::set_allocated_main_server_conf_path(::std::string* main_server_conf_path) {
  if (main_server_conf_path != NULL) {
    set_has_main_server_conf_path();
  } else {
    clear_has_main_server_conf_path();
  }
  main_server_conf_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main_server_conf_path);
  // @@protoc_insertion_point(field_set_allocated:peleus.modules.configure.server_conf.main_server_conf_path)
}

// required int32 idle_timeout_sec = 2;
inline bool server_conf::has_idle_timeout_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void server_conf::set_has_idle_timeout_sec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void server_conf::clear_has_idle_timeout_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void server_conf::clear_idle_timeout_sec() {
  idle_timeout_sec_ = 0;
  clear_has_idle_timeout_sec();
}
inline ::google::protobuf::int32 server_conf::idle_timeout_sec() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.server_conf.idle_timeout_sec)
  return idle_timeout_sec_;
}
inline void server_conf::set_idle_timeout_sec(::google::protobuf::int32 value) {
  set_has_idle_timeout_sec();
  idle_timeout_sec_ = value;
  // @@protoc_insertion_point(field_set:peleus.modules.configure.server_conf.idle_timeout_sec)
}

// required int32 max_concurrency = 3;
inline bool server_conf::has_max_concurrency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void server_conf::set_has_max_concurrency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void server_conf::clear_has_max_concurrency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void server_conf::clear_max_concurrency() {
  max_concurrency_ = 0;
  clear_has_max_concurrency();
}
inline ::google::protobuf::int32 server_conf::max_concurrency() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.server_conf.max_concurrency)
  return max_concurrency_;
}
inline void server_conf::set_max_concurrency(::google::protobuf::int32 value) {
  set_has_max_concurrency();
  max_concurrency_ = value;
  // @@protoc_insertion_point(field_set:peleus.modules.configure.server_conf.max_concurrency)
}

// required int32 internal_port = 4;
inline bool server_conf::has_internal_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void server_conf::set_has_internal_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void server_conf::clear_has_internal_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void server_conf::clear_internal_port() {
  internal_port_ = 0;
  clear_has_internal_port();
}
inline ::google::protobuf::int32 server_conf::internal_port() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.server_conf.internal_port)
  return internal_port_;
}
inline void server_conf::set_internal_port(::google::protobuf::int32 value) {
  set_has_internal_port();
  internal_port_ = value;
  // @@protoc_insertion_point(field_set:peleus.modules.configure.server_conf.internal_port)
}

// required int32 port = 5;
inline bool server_conf::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void server_conf::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void server_conf::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void server_conf::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 server_conf::port() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.server_conf.port)
  return port_;
}
inline void server_conf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:peleus.modules.configure.server_conf.port)
}

// required int32 num_threads = 6;
inline bool server_conf::has_num_threads() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void server_conf::set_has_num_threads() {
  _has_bits_[0] |= 0x00000020u;
}
inline void server_conf::clear_has_num_threads() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void server_conf::clear_num_threads() {
  num_threads_ = 0;
  clear_has_num_threads();
}
inline ::google::protobuf::int32 server_conf::num_threads() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.server_conf.num_threads)
  return num_threads_;
}
inline void server_conf::set_num_threads(::google::protobuf::int32 value) {
  set_has_num_threads();
  num_threads_ = value;
  // @@protoc_insertion_point(field_set:peleus.modules.configure.server_conf.num_threads)
}

// optional .peleus.modules.configure.mc_pack_type mcpack_type = 7 [default = FORMAT_NONE];
inline bool server_conf::has_mcpack_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void server_conf::set_has_mcpack_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void server_conf::clear_has_mcpack_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void server_conf::clear_mcpack_type() {
  mcpack_type_ = 2;
  clear_has_mcpack_type();
}
inline ::peleus::modules::configure::mc_pack_type server_conf::mcpack_type() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.server_conf.mcpack_type)
  return static_cast< ::peleus::modules::configure::mc_pack_type >(mcpack_type_);
}
inline void server_conf::set_mcpack_type(::peleus::modules::configure::mc_pack_type value) {
  assert(::peleus::modules::configure::mc_pack_type_IsValid(value));
  set_has_mcpack_type();
  mcpack_type_ = value;
  // @@protoc_insertion_point(field_set:peleus.modules.configure.server_conf.mcpack_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace configure
}  // namespace modules
}  // namespace peleus

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::peleus::modules::configure::mc_pack_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::peleus::modules::configure::mc_pack_type>() {
  return ::peleus::modules::configure::mc_pack_type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_src_2fmodules_2fconfigure_2fserver_2eproto
