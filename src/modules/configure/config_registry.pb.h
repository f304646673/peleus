// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/modules/configure/config_registry.proto

#ifndef PROTOBUF_INCLUDED_src_2fmodules_2fconfigure_2fconfig_5fregistry_2eproto
#define PROTOBUF_INCLUDED_src_2fmodules_2fconfigure_2fconfig_5fregistry_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fmodules_2fconfigure_2fconfig_5fregistry_2eproto 

namespace protobuf_src_2fmodules_2fconfigure_2fconfig_5fregistry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_src_2fmodules_2fconfigure_2fconfig_5fregistry_2eproto
namespace peleus {
namespace modules {
namespace configure {
class config_registry_conf;
class config_registry_confDefaultTypeInternal;
extern config_registry_confDefaultTypeInternal _config_registry_conf_default_instance_;
class module_conf;
class module_confDefaultTypeInternal;
extern module_confDefaultTypeInternal _module_conf_default_instance_;
}  // namespace configure
}  // namespace modules
}  // namespace peleus
namespace google {
namespace protobuf {
template<> ::peleus::modules::configure::config_registry_conf* Arena::CreateMaybeMessage<::peleus::modules::configure::config_registry_conf>(Arena*);
template<> ::peleus::modules::configure::module_conf* Arena::CreateMaybeMessage<::peleus::modules::configure::module_conf>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace peleus {
namespace modules {
namespace configure {

// ===================================================================

class module_conf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.modules.configure.module_conf) */ {
 public:
  module_conf();
  virtual ~module_conf();

  module_conf(const module_conf& from);

  inline module_conf& operator=(const module_conf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  module_conf(module_conf&& from) noexcept
    : module_conf() {
    *this = ::std::move(from);
  }

  inline module_conf& operator=(module_conf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const module_conf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const module_conf* internal_default_instance() {
    return reinterpret_cast<const module_conf*>(
               &_module_conf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(module_conf* other);
  friend void swap(module_conf& a, module_conf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline module_conf* New() const final {
    return CreateMaybeMessage<module_conf>(NULL);
  }

  module_conf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<module_conf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const module_conf& from);
  void MergeFrom(const module_conf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(module_conf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string path = 2;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:peleus.modules.configure.module_conf)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_path();
  void clear_has_path();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  friend struct ::protobuf_src_2fmodules_2fconfigure_2fconfig_5fregistry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class config_registry_conf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.modules.configure.config_registry_conf) */ {
 public:
  config_registry_conf();
  virtual ~config_registry_conf();

  config_registry_conf(const config_registry_conf& from);

  inline config_registry_conf& operator=(const config_registry_conf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  config_registry_conf(config_registry_conf&& from) noexcept
    : config_registry_conf() {
    *this = ::std::move(from);
  }

  inline config_registry_conf& operator=(config_registry_conf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const config_registry_conf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const config_registry_conf* internal_default_instance() {
    return reinterpret_cast<const config_registry_conf*>(
               &_config_registry_conf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(config_registry_conf* other);
  friend void swap(config_registry_conf& a, config_registry_conf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline config_registry_conf* New() const final {
    return CreateMaybeMessage<config_registry_conf>(NULL);
  }

  config_registry_conf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<config_registry_conf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const config_registry_conf& from);
  void MergeFrom(const config_registry_conf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(config_registry_conf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .peleus.modules.configure.module_conf modules_conf = 1;
  int modules_conf_size() const;
  void clear_modules_conf();
  static const int kModulesConfFieldNumber = 1;
  ::peleus::modules::configure::module_conf* mutable_modules_conf(int index);
  ::google::protobuf::RepeatedPtrField< ::peleus::modules::configure::module_conf >*
      mutable_modules_conf();
  const ::peleus::modules::configure::module_conf& modules_conf(int index) const;
  ::peleus::modules::configure::module_conf* add_modules_conf();
  const ::google::protobuf::RepeatedPtrField< ::peleus::modules::configure::module_conf >&
      modules_conf() const;

  // @@protoc_insertion_point(class_scope:peleus.modules.configure.config_registry_conf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::peleus::modules::configure::module_conf > modules_conf_;
  friend struct ::protobuf_src_2fmodules_2fconfigure_2fconfig_5fregistry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// module_conf

// required string name = 1;
inline bool module_conf::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void module_conf::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void module_conf::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void module_conf::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& module_conf::name() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.module_conf.name)
  return name_.GetNoArena();
}
inline void module_conf::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.modules.configure.module_conf.name)
}
#if LANG_CXX11
inline void module_conf::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.modules.configure.module_conf.name)
}
#endif
inline void module_conf::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.modules.configure.module_conf.name)
}
inline void module_conf::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.modules.configure.module_conf.name)
}
inline ::std::string* module_conf::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:peleus.modules.configure.module_conf.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* module_conf::release_name() {
  // @@protoc_insertion_point(field_release:peleus.modules.configure.module_conf.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void module_conf::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:peleus.modules.configure.module_conf.name)
}

// required string path = 2;
inline bool module_conf::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void module_conf::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void module_conf::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void module_conf::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& module_conf::path() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.module_conf.path)
  return path_.GetNoArena();
}
inline void module_conf::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.modules.configure.module_conf.path)
}
#if LANG_CXX11
inline void module_conf::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.modules.configure.module_conf.path)
}
#endif
inline void module_conf::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.modules.configure.module_conf.path)
}
inline void module_conf::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.modules.configure.module_conf.path)
}
inline ::std::string* module_conf::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:peleus.modules.configure.module_conf.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* module_conf::release_path() {
  // @@protoc_insertion_point(field_release:peleus.modules.configure.module_conf.path)
  if (!has_path()) {
    return NULL;
  }
  clear_has_path();
  return path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void module_conf::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:peleus.modules.configure.module_conf.path)
}

// -------------------------------------------------------------------

// config_registry_conf

// repeated .peleus.modules.configure.module_conf modules_conf = 1;
inline int config_registry_conf::modules_conf_size() const {
  return modules_conf_.size();
}
inline void config_registry_conf::clear_modules_conf() {
  modules_conf_.Clear();
}
inline ::peleus::modules::configure::module_conf* config_registry_conf::mutable_modules_conf(int index) {
  // @@protoc_insertion_point(field_mutable:peleus.modules.configure.config_registry_conf.modules_conf)
  return modules_conf_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::peleus::modules::configure::module_conf >*
config_registry_conf::mutable_modules_conf() {
  // @@protoc_insertion_point(field_mutable_list:peleus.modules.configure.config_registry_conf.modules_conf)
  return &modules_conf_;
}
inline const ::peleus::modules::configure::module_conf& config_registry_conf::modules_conf(int index) const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.config_registry_conf.modules_conf)
  return modules_conf_.Get(index);
}
inline ::peleus::modules::configure::module_conf* config_registry_conf::add_modules_conf() {
  // @@protoc_insertion_point(field_add:peleus.modules.configure.config_registry_conf.modules_conf)
  return modules_conf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::peleus::modules::configure::module_conf >&
config_registry_conf::modules_conf() const {
  // @@protoc_insertion_point(field_list:peleus.modules.configure.config_registry_conf.modules_conf)
  return modules_conf_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace configure
}  // namespace modules
}  // namespace peleus

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_src_2fmodules_2fconfigure_2fconfig_5fregistry_2eproto
