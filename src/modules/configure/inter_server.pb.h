// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/modules/configure/inter_server.proto

#ifndef PROTOBUF_INCLUDED_src_2fmodules_2fconfigure_2finter_5fserver_2eproto
#define PROTOBUF_INCLUDED_src_2fmodules_2fconfigure_2finter_5fserver_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fmodules_2fconfigure_2finter_5fserver_2eproto 

namespace protobuf_src_2fmodules_2fconfigure_2finter_5fserver_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_src_2fmodules_2fconfigure_2finter_5fserver_2eproto
namespace peleus {
namespace modules {
namespace configure {
class inter_server_conf;
class inter_server_confDefaultTypeInternal;
extern inter_server_confDefaultTypeInternal _inter_server_conf_default_instance_;
class query_inter_server_conf;
class query_inter_server_confDefaultTypeInternal;
extern query_inter_server_confDefaultTypeInternal _query_inter_server_conf_default_instance_;
}  // namespace configure
}  // namespace modules
}  // namespace peleus
namespace google {
namespace protobuf {
template<> ::peleus::modules::configure::inter_server_conf* Arena::CreateMaybeMessage<::peleus::modules::configure::inter_server_conf>(Arena*);
template<> ::peleus::modules::configure::query_inter_server_conf* Arena::CreateMaybeMessage<::peleus::modules::configure::query_inter_server_conf>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace peleus {
namespace modules {
namespace configure {

// ===================================================================

class query_inter_server_conf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.modules.configure.query_inter_server_conf) */ {
 public:
  query_inter_server_conf();
  virtual ~query_inter_server_conf();

  query_inter_server_conf(const query_inter_server_conf& from);

  inline query_inter_server_conf& operator=(const query_inter_server_conf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  query_inter_server_conf(query_inter_server_conf&& from) noexcept
    : query_inter_server_conf() {
    *this = ::std::move(from);
  }

  inline query_inter_server_conf& operator=(query_inter_server_conf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_inter_server_conf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const query_inter_server_conf* internal_default_instance() {
    return reinterpret_cast<const query_inter_server_conf*>(
               &_query_inter_server_conf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(query_inter_server_conf* other);
  friend void swap(query_inter_server_conf& a, query_inter_server_conf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline query_inter_server_conf* New() const final {
    return CreateMaybeMessage<query_inter_server_conf>(NULL);
  }

  query_inter_server_conf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<query_inter_server_conf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const query_inter_server_conf& from);
  void MergeFrom(const query_inter_server_conf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(query_inter_server_conf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string server = 1;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 1;
  const ::std::string& server() const;
  void set_server(const ::std::string& value);
  #if LANG_CXX11
  void set_server(::std::string&& value);
  #endif
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  ::std::string* mutable_server();
  ::std::string* release_server();
  void set_allocated_server(::std::string* server);

  // required string connection_type = 2;
  bool has_connection_type() const;
  void clear_connection_type();
  static const int kConnectionTypeFieldNumber = 2;
  const ::std::string& connection_type() const;
  void set_connection_type(const ::std::string& value);
  #if LANG_CXX11
  void set_connection_type(::std::string&& value);
  #endif
  void set_connection_type(const char* value);
  void set_connection_type(const char* value, size_t size);
  ::std::string* mutable_connection_type();
  ::std::string* release_connection_type();
  void set_allocated_connection_type(::std::string* connection_type);

  // required string balancer = 6;
  bool has_balancer() const;
  void clear_balancer();
  static const int kBalancerFieldNumber = 6;
  const ::std::string& balancer() const;
  void set_balancer(const ::std::string& value);
  #if LANG_CXX11
  void set_balancer(::std::string&& value);
  #endif
  void set_balancer(const char* value);
  void set_balancer(const char* value, size_t size);
  ::std::string* mutable_balancer();
  ::std::string* release_balancer();
  void set_allocated_balancer(::std::string* balancer);

  // required int32 connect_timeout_ms = 3;
  bool has_connect_timeout_ms() const;
  void clear_connect_timeout_ms();
  static const int kConnectTimeoutMsFieldNumber = 3;
  ::google::protobuf::int32 connect_timeout_ms() const;
  void set_connect_timeout_ms(::google::protobuf::int32 value);

  // required int32 timeout_ms = 4;
  bool has_timeout_ms() const;
  void clear_timeout_ms();
  static const int kTimeoutMsFieldNumber = 4;
  ::google::protobuf::int32 timeout_ms() const;
  void set_timeout_ms(::google::protobuf::int32 value);

  // required int32 max_retry = 5;
  bool has_max_retry() const;
  void clear_max_retry();
  static const int kMaxRetryFieldNumber = 5;
  ::google::protobuf::int32 max_retry() const;
  void set_max_retry(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:peleus.modules.configure.query_inter_server_conf)
 private:
  void set_has_server();
  void clear_has_server();
  void set_has_connection_type();
  void clear_has_connection_type();
  void set_has_connect_timeout_ms();
  void clear_has_connect_timeout_ms();
  void set_has_timeout_ms();
  void clear_has_timeout_ms();
  void set_has_max_retry();
  void clear_has_max_retry();
  void set_has_balancer();
  void clear_has_balancer();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_;
  ::google::protobuf::internal::ArenaStringPtr connection_type_;
  ::google::protobuf::internal::ArenaStringPtr balancer_;
  ::google::protobuf::int32 connect_timeout_ms_;
  ::google::protobuf::int32 timeout_ms_;
  ::google::protobuf::int32 max_retry_;
  friend struct ::protobuf_src_2fmodules_2fconfigure_2finter_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class inter_server_conf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peleus.modules.configure.inter_server_conf) */ {
 public:
  inter_server_conf();
  virtual ~inter_server_conf();

  inter_server_conf(const inter_server_conf& from);

  inline inter_server_conf& operator=(const inter_server_conf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  inter_server_conf(inter_server_conf&& from) noexcept
    : inter_server_conf() {
    *this = ::std::move(from);
  }

  inline inter_server_conf& operator=(inter_server_conf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const inter_server_conf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const inter_server_conf* internal_default_instance() {
    return reinterpret_cast<const inter_server_conf*>(
               &_inter_server_conf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(inter_server_conf* other);
  friend void swap(inter_server_conf& a, inter_server_conf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline inter_server_conf* New() const final {
    return CreateMaybeMessage<inter_server_conf>(NULL);
  }

  inter_server_conf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<inter_server_conf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const inter_server_conf& from);
  void MergeFrom(const inter_server_conf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(inter_server_conf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string inter_servers_conf_path = 4;
  bool has_inter_servers_conf_path() const;
  void clear_inter_servers_conf_path();
  static const int kInterServersConfPathFieldNumber = 4;
  const ::std::string& inter_servers_conf_path() const;
  void set_inter_servers_conf_path(const ::std::string& value);
  #if LANG_CXX11
  void set_inter_servers_conf_path(::std::string&& value);
  #endif
  void set_inter_servers_conf_path(const char* value);
  void set_inter_servers_conf_path(const char* value, size_t size);
  ::std::string* mutable_inter_servers_conf_path();
  ::std::string* release_inter_servers_conf_path();
  void set_allocated_inter_servers_conf_path(::std::string* inter_servers_conf_path);

  // required .peleus.modules.configure.query_inter_server_conf query_conf = 5;
  bool has_query_conf() const;
  void clear_query_conf();
  static const int kQueryConfFieldNumber = 5;
  private:
  const ::peleus::modules::configure::query_inter_server_conf& _internal_query_conf() const;
  public:
  const ::peleus::modules::configure::query_inter_server_conf& query_conf() const;
  ::peleus::modules::configure::query_inter_server_conf* release_query_conf();
  ::peleus::modules::configure::query_inter_server_conf* mutable_query_conf();
  void set_allocated_query_conf(::peleus::modules::configure::query_inter_server_conf* query_conf);

  // required int32 idle_timeout_sec = 1;
  bool has_idle_timeout_sec() const;
  void clear_idle_timeout_sec();
  static const int kIdleTimeoutSecFieldNumber = 1;
  ::google::protobuf::int32 idle_timeout_sec() const;
  void set_idle_timeout_sec(::google::protobuf::int32 value);

  // required int32 max_concurrency = 2;
  bool has_max_concurrency() const;
  void clear_max_concurrency();
  static const int kMaxConcurrencyFieldNumber = 2;
  ::google::protobuf::int32 max_concurrency() const;
  void set_max_concurrency(::google::protobuf::int32 value);

  // required int32 port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:peleus.modules.configure.inter_server_conf)
 private:
  void set_has_idle_timeout_sec();
  void clear_has_idle_timeout_sec();
  void set_has_max_concurrency();
  void clear_has_max_concurrency();
  void set_has_port();
  void clear_has_port();
  void set_has_inter_servers_conf_path();
  void clear_has_inter_servers_conf_path();
  void set_has_query_conf();
  void clear_has_query_conf();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr inter_servers_conf_path_;
  ::peleus::modules::configure::query_inter_server_conf* query_conf_;
  ::google::protobuf::int32 idle_timeout_sec_;
  ::google::protobuf::int32 max_concurrency_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_src_2fmodules_2fconfigure_2finter_5fserver_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// query_inter_server_conf

// required string server = 1;
inline bool query_inter_server_conf::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_inter_server_conf::set_has_server() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_inter_server_conf::clear_has_server() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_inter_server_conf::clear_server() {
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server();
}
inline const ::std::string& query_inter_server_conf::server() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.query_inter_server_conf.server)
  return server_.GetNoArena();
}
inline void query_inter_server_conf::set_server(const ::std::string& value) {
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.modules.configure.query_inter_server_conf.server)
}
#if LANG_CXX11
inline void query_inter_server_conf::set_server(::std::string&& value) {
  set_has_server();
  server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.modules.configure.query_inter_server_conf.server)
}
#endif
inline void query_inter_server_conf::set_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.modules.configure.query_inter_server_conf.server)
}
inline void query_inter_server_conf::set_server(const char* value, size_t size) {
  set_has_server();
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.modules.configure.query_inter_server_conf.server)
}
inline ::std::string* query_inter_server_conf::mutable_server() {
  set_has_server();
  // @@protoc_insertion_point(field_mutable:peleus.modules.configure.query_inter_server_conf.server)
  return server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* query_inter_server_conf::release_server() {
  // @@protoc_insertion_point(field_release:peleus.modules.configure.query_inter_server_conf.server)
  if (!has_server()) {
    return NULL;
  }
  clear_has_server();
  return server_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void query_inter_server_conf::set_allocated_server(::std::string* server) {
  if (server != NULL) {
    set_has_server();
  } else {
    clear_has_server();
  }
  server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:peleus.modules.configure.query_inter_server_conf.server)
}

// required string connection_type = 2;
inline bool query_inter_server_conf::has_connection_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void query_inter_server_conf::set_has_connection_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void query_inter_server_conf::clear_has_connection_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void query_inter_server_conf::clear_connection_type() {
  connection_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_connection_type();
}
inline const ::std::string& query_inter_server_conf::connection_type() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.query_inter_server_conf.connection_type)
  return connection_type_.GetNoArena();
}
inline void query_inter_server_conf::set_connection_type(const ::std::string& value) {
  set_has_connection_type();
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.modules.configure.query_inter_server_conf.connection_type)
}
#if LANG_CXX11
inline void query_inter_server_conf::set_connection_type(::std::string&& value) {
  set_has_connection_type();
  connection_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.modules.configure.query_inter_server_conf.connection_type)
}
#endif
inline void query_inter_server_conf::set_connection_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connection_type();
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.modules.configure.query_inter_server_conf.connection_type)
}
inline void query_inter_server_conf::set_connection_type(const char* value, size_t size) {
  set_has_connection_type();
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.modules.configure.query_inter_server_conf.connection_type)
}
inline ::std::string* query_inter_server_conf::mutable_connection_type() {
  set_has_connection_type();
  // @@protoc_insertion_point(field_mutable:peleus.modules.configure.query_inter_server_conf.connection_type)
  return connection_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* query_inter_server_conf::release_connection_type() {
  // @@protoc_insertion_point(field_release:peleus.modules.configure.query_inter_server_conf.connection_type)
  if (!has_connection_type()) {
    return NULL;
  }
  clear_has_connection_type();
  return connection_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void query_inter_server_conf::set_allocated_connection_type(::std::string* connection_type) {
  if (connection_type != NULL) {
    set_has_connection_type();
  } else {
    clear_has_connection_type();
  }
  connection_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_type);
  // @@protoc_insertion_point(field_set_allocated:peleus.modules.configure.query_inter_server_conf.connection_type)
}

// required int32 connect_timeout_ms = 3;
inline bool query_inter_server_conf::has_connect_timeout_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void query_inter_server_conf::set_has_connect_timeout_ms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void query_inter_server_conf::clear_has_connect_timeout_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void query_inter_server_conf::clear_connect_timeout_ms() {
  connect_timeout_ms_ = 0;
  clear_has_connect_timeout_ms();
}
inline ::google::protobuf::int32 query_inter_server_conf::connect_timeout_ms() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.query_inter_server_conf.connect_timeout_ms)
  return connect_timeout_ms_;
}
inline void query_inter_server_conf::set_connect_timeout_ms(::google::protobuf::int32 value) {
  set_has_connect_timeout_ms();
  connect_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:peleus.modules.configure.query_inter_server_conf.connect_timeout_ms)
}

// required int32 timeout_ms = 4;
inline bool query_inter_server_conf::has_timeout_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void query_inter_server_conf::set_has_timeout_ms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void query_inter_server_conf::clear_has_timeout_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void query_inter_server_conf::clear_timeout_ms() {
  timeout_ms_ = 0;
  clear_has_timeout_ms();
}
inline ::google::protobuf::int32 query_inter_server_conf::timeout_ms() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.query_inter_server_conf.timeout_ms)
  return timeout_ms_;
}
inline void query_inter_server_conf::set_timeout_ms(::google::protobuf::int32 value) {
  set_has_timeout_ms();
  timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:peleus.modules.configure.query_inter_server_conf.timeout_ms)
}

// required int32 max_retry = 5;
inline bool query_inter_server_conf::has_max_retry() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void query_inter_server_conf::set_has_max_retry() {
  _has_bits_[0] |= 0x00000020u;
}
inline void query_inter_server_conf::clear_has_max_retry() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void query_inter_server_conf::clear_max_retry() {
  max_retry_ = 0;
  clear_has_max_retry();
}
inline ::google::protobuf::int32 query_inter_server_conf::max_retry() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.query_inter_server_conf.max_retry)
  return max_retry_;
}
inline void query_inter_server_conf::set_max_retry(::google::protobuf::int32 value) {
  set_has_max_retry();
  max_retry_ = value;
  // @@protoc_insertion_point(field_set:peleus.modules.configure.query_inter_server_conf.max_retry)
}

// required string balancer = 6;
inline bool query_inter_server_conf::has_balancer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void query_inter_server_conf::set_has_balancer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void query_inter_server_conf::clear_has_balancer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void query_inter_server_conf::clear_balancer() {
  balancer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_balancer();
}
inline const ::std::string& query_inter_server_conf::balancer() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.query_inter_server_conf.balancer)
  return balancer_.GetNoArena();
}
inline void query_inter_server_conf::set_balancer(const ::std::string& value) {
  set_has_balancer();
  balancer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.modules.configure.query_inter_server_conf.balancer)
}
#if LANG_CXX11
inline void query_inter_server_conf::set_balancer(::std::string&& value) {
  set_has_balancer();
  balancer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.modules.configure.query_inter_server_conf.balancer)
}
#endif
inline void query_inter_server_conf::set_balancer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_balancer();
  balancer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.modules.configure.query_inter_server_conf.balancer)
}
inline void query_inter_server_conf::set_balancer(const char* value, size_t size) {
  set_has_balancer();
  balancer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.modules.configure.query_inter_server_conf.balancer)
}
inline ::std::string* query_inter_server_conf::mutable_balancer() {
  set_has_balancer();
  // @@protoc_insertion_point(field_mutable:peleus.modules.configure.query_inter_server_conf.balancer)
  return balancer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* query_inter_server_conf::release_balancer() {
  // @@protoc_insertion_point(field_release:peleus.modules.configure.query_inter_server_conf.balancer)
  if (!has_balancer()) {
    return NULL;
  }
  clear_has_balancer();
  return balancer_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void query_inter_server_conf::set_allocated_balancer(::std::string* balancer) {
  if (balancer != NULL) {
    set_has_balancer();
  } else {
    clear_has_balancer();
  }
  balancer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), balancer);
  // @@protoc_insertion_point(field_set_allocated:peleus.modules.configure.query_inter_server_conf.balancer)
}

// -------------------------------------------------------------------

// inter_server_conf

// required int32 idle_timeout_sec = 1;
inline bool inter_server_conf::has_idle_timeout_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void inter_server_conf::set_has_idle_timeout_sec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void inter_server_conf::clear_has_idle_timeout_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void inter_server_conf::clear_idle_timeout_sec() {
  idle_timeout_sec_ = 0;
  clear_has_idle_timeout_sec();
}
inline ::google::protobuf::int32 inter_server_conf::idle_timeout_sec() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.inter_server_conf.idle_timeout_sec)
  return idle_timeout_sec_;
}
inline void inter_server_conf::set_idle_timeout_sec(::google::protobuf::int32 value) {
  set_has_idle_timeout_sec();
  idle_timeout_sec_ = value;
  // @@protoc_insertion_point(field_set:peleus.modules.configure.inter_server_conf.idle_timeout_sec)
}

// required int32 max_concurrency = 2;
inline bool inter_server_conf::has_max_concurrency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void inter_server_conf::set_has_max_concurrency() {
  _has_bits_[0] |= 0x00000008u;
}
inline void inter_server_conf::clear_has_max_concurrency() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void inter_server_conf::clear_max_concurrency() {
  max_concurrency_ = 0;
  clear_has_max_concurrency();
}
inline ::google::protobuf::int32 inter_server_conf::max_concurrency() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.inter_server_conf.max_concurrency)
  return max_concurrency_;
}
inline void inter_server_conf::set_max_concurrency(::google::protobuf::int32 value) {
  set_has_max_concurrency();
  max_concurrency_ = value;
  // @@protoc_insertion_point(field_set:peleus.modules.configure.inter_server_conf.max_concurrency)
}

// required int32 port = 3;
inline bool inter_server_conf::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void inter_server_conf::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void inter_server_conf::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void inter_server_conf::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 inter_server_conf::port() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.inter_server_conf.port)
  return port_;
}
inline void inter_server_conf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:peleus.modules.configure.inter_server_conf.port)
}

// required string inter_servers_conf_path = 4;
inline bool inter_server_conf::has_inter_servers_conf_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void inter_server_conf::set_has_inter_servers_conf_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void inter_server_conf::clear_has_inter_servers_conf_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void inter_server_conf::clear_inter_servers_conf_path() {
  inter_servers_conf_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inter_servers_conf_path();
}
inline const ::std::string& inter_server_conf::inter_servers_conf_path() const {
  // @@protoc_insertion_point(field_get:peleus.modules.configure.inter_server_conf.inter_servers_conf_path)
  return inter_servers_conf_path_.GetNoArena();
}
inline void inter_server_conf::set_inter_servers_conf_path(const ::std::string& value) {
  set_has_inter_servers_conf_path();
  inter_servers_conf_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peleus.modules.configure.inter_server_conf.inter_servers_conf_path)
}
#if LANG_CXX11
inline void inter_server_conf::set_inter_servers_conf_path(::std::string&& value) {
  set_has_inter_servers_conf_path();
  inter_servers_conf_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peleus.modules.configure.inter_server_conf.inter_servers_conf_path)
}
#endif
inline void inter_server_conf::set_inter_servers_conf_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_inter_servers_conf_path();
  inter_servers_conf_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peleus.modules.configure.inter_server_conf.inter_servers_conf_path)
}
inline void inter_server_conf::set_inter_servers_conf_path(const char* value, size_t size) {
  set_has_inter_servers_conf_path();
  inter_servers_conf_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peleus.modules.configure.inter_server_conf.inter_servers_conf_path)
}
inline ::std::string* inter_server_conf::mutable_inter_servers_conf_path() {
  set_has_inter_servers_conf_path();
  // @@protoc_insertion_point(field_mutable:peleus.modules.configure.inter_server_conf.inter_servers_conf_path)
  return inter_servers_conf_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* inter_server_conf::release_inter_servers_conf_path() {
  // @@protoc_insertion_point(field_release:peleus.modules.configure.inter_server_conf.inter_servers_conf_path)
  if (!has_inter_servers_conf_path()) {
    return NULL;
  }
  clear_has_inter_servers_conf_path();
  return inter_servers_conf_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void inter_server_conf::set_allocated_inter_servers_conf_path(::std::string* inter_servers_conf_path) {
  if (inter_servers_conf_path != NULL) {
    set_has_inter_servers_conf_path();
  } else {
    clear_has_inter_servers_conf_path();
  }
  inter_servers_conf_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inter_servers_conf_path);
  // @@protoc_insertion_point(field_set_allocated:peleus.modules.configure.inter_server_conf.inter_servers_conf_path)
}

// required .peleus.modules.configure.query_inter_server_conf query_conf = 5;
inline bool inter_server_conf::has_query_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void inter_server_conf::set_has_query_conf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void inter_server_conf::clear_has_query_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void inter_server_conf::clear_query_conf() {
  if (query_conf_ != NULL) query_conf_->Clear();
  clear_has_query_conf();
}
inline const ::peleus::modules::configure::query_inter_server_conf& inter_server_conf::_internal_query_conf() const {
  return *query_conf_;
}
inline const ::peleus::modules::configure::query_inter_server_conf& inter_server_conf::query_conf() const {
  const ::peleus::modules::configure::query_inter_server_conf* p = query_conf_;
  // @@protoc_insertion_point(field_get:peleus.modules.configure.inter_server_conf.query_conf)
  return p != NULL ? *p : *reinterpret_cast<const ::peleus::modules::configure::query_inter_server_conf*>(
      &::peleus::modules::configure::_query_inter_server_conf_default_instance_);
}
inline ::peleus::modules::configure::query_inter_server_conf* inter_server_conf::release_query_conf() {
  // @@protoc_insertion_point(field_release:peleus.modules.configure.inter_server_conf.query_conf)
  clear_has_query_conf();
  ::peleus::modules::configure::query_inter_server_conf* temp = query_conf_;
  query_conf_ = NULL;
  return temp;
}
inline ::peleus::modules::configure::query_inter_server_conf* inter_server_conf::mutable_query_conf() {
  set_has_query_conf();
  if (query_conf_ == NULL) {
    auto* p = CreateMaybeMessage<::peleus::modules::configure::query_inter_server_conf>(GetArenaNoVirtual());
    query_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:peleus.modules.configure.inter_server_conf.query_conf)
  return query_conf_;
}
inline void inter_server_conf::set_allocated_query_conf(::peleus::modules::configure::query_inter_server_conf* query_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete query_conf_;
  }
  if (query_conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query_conf, submessage_arena);
    }
    set_has_query_conf();
  } else {
    clear_has_query_conf();
  }
  query_conf_ = query_conf;
  // @@protoc_insertion_point(field_set_allocated:peleus.modules.configure.inter_server_conf.query_conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace configure
}  // namespace modules
}  // namespace peleus

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_src_2fmodules_2fconfigure_2finter_5fserver_2eproto
